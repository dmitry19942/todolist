{"version":3,"sources":["features/todolists-list/todolists/Todolist/Tasks/Task/styles.module.css","serviceWorker.ts","common/enums/common-enums.ts","app/app-reducer.ts","common/actions/common-actions.ts","common/utils/handle-server-app-error.ts","common/utils/handle-server-network-error.ts","common/utils/create-app-async-thunk.ts","common/api/common-api.ts","features/todolists-list/todolists/todolist-api.ts","common/utils/thunk-try-catch.ts","features/todolists-list/todolists/todolists-reducer.ts","features/todolists-list/tasks/tasks-api.ts","features/todolists-list/tasks/tasks-reducer.ts","features/auth/auth-api.ts","features/auth/auth-reducer.ts","app/store.ts","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","app/app-selectors.ts","common/hooks/useAppDispatch.ts","common/hooks/useActions.ts","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/todolists-list/todolists/Todolist/FilterTasksButtons/FilterTasksButtons.tsx","features/todolists-list/todolists/Todolist/Tasks/Task/Task.tsx","features/todolists-list/todolists/Todolist/Tasks/Tasks.tsx","features/todolists-list/todolists/Todolist/TodolistTitle/TodolistTitle.tsx","features/todolists-list/todolists/Todolist/Todolist.tsx","features/auth/auth-selectors.ts","features/todolists-list/tasks/tasks-selector.ts","features/todolists-list/todolists/todolists-selector.ts","features/todolists-list/TodolistsList.tsx","features/auth/Login.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppStatus","state","action","payload","setAppError","setIsInitialized","appReducer","reducer","appActions","actions","clearTasksAndTodolists","createAction","handleServerAppError","data","dispatch","showError","messages","length","handleServerNetworkError","e","err","axios","isAxiosError","message","createAppAsyncThunk","createAsyncThunk","withTypes","instance","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","arg","put","ResultCode","thunkTryCatch","thunkAPI","logic","a","rejectWithValue","fetchTodolists","_","res","todolists","removeTodolist","todolistsActions","changeTodolistEntityStatusAC","entityStatus","resultCode","addTodolist","todolist","item","changeTodolistTitle","changeTodolistFilter","index","findIndex","tl","id","filter","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todolistsReducer","todolistsThunks","tasksApi","taskId","model","fetchTasks","tasks","items","addTask","task","updateTask","getState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","domainModel","removeTask","tasksActions","changeTaskEntityStatusAC","todoListId","forEach","tasksReducer","tasksThunks","authAPI","login","isLoggedIn","isShowAppError","fieldsErrors","logout","initializeApp","authReducer","authThunks","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","trim","TextField","value","onChange","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","selectIsInitialized","selectStatus","selectError","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","FilterTasksButtons","changeFilterHandler","Button","Task","className","Completed","s","isDone","Checkbox","checked","New","Delete","Tasks","tasksForTodolist","TodolistTitle","Todolist","useEffect","style","paddingTop","selectIsLoggedIn","selectTasks","selectTodolists","TodolistsList","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","formikHelpers","unwrap","catch","fieldError","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","handleChange","isValid","dirty","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,OAAS,yB,sKCWPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IClBMC,EAOAC,E,yDCGNC,EAAQC,YAAY,CAClBC,KAAM,MACNC,aAR+B,CACnCC,OAAQ,OACRC,MAAO,KACPC,eAAe,GAMXC,SAAU,CACNC,aADM,SACOC,EAAOC,GAChBD,EAAML,OAASM,EAAOC,QAAQP,QAElCQ,YAJM,SAIMH,EAAOC,GACfD,EAAMJ,MAAQK,EAAOC,QAAQN,OAEjCQ,iBAPM,SAOWJ,EAAOC,GACpBD,EAAMH,cAAgBI,EAAOC,QAAQL,kBAMxCQ,EAAad,EAAMe,QACnBC,EAAahB,EAAMiB,QC1BnBC,EAAyBC,YAAa,gCCQtCC,EAAuB,SAAIC,EAAuBC,GAAmD,IAA/BC,IAA8B,yDACzGA,GACAD,EAASN,EAAWJ,YAAa,CAACP,MAAOgB,EAAKG,SAASC,OAASJ,EAAKG,SAAS,GAAK,0B,iBCF9EE,EAA2B,SAACC,EAAYL,GACjD,IAAMM,EAAMD,EACZ,GAAIE,IAAMC,aAAaF,GAAM,CACzB,IAAMvB,EAAQuB,EAAIG,QAAUH,EAAIG,QAAU,sBAC1CT,EAASN,EAAWJ,YAAY,CAACP,gBAEjCiB,EAASN,EAAWJ,YAAY,CAACP,MAAM,gBAAD,OAAkBuB,EAAIG,aCTvDC,EAAsBC,IAAiBC,YCLvCC,EAAWN,IAAMO,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CCDNC,EAAc,WAEnB,OAAOL,EAASM,IAAyB,eAFpCD,EAAc,SAIRE,GACX,OAAOP,EAASQ,KAA6E,aACzF,CAACD,MAAOA,KANPF,EAAc,SAQRI,GACX,OAAOT,EAASU,OAAT,qBAA4CD,KAT9CJ,EAAc,SAWRM,GACX,OAAOX,EAASY,IAAT,qBAA2ED,EAAIF,YAClF,CAACF,MAAOI,EAAIJ,U,SPlBZ5C,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAQL,IAAMiD,EACA,EQTAC,EAAa,uCAAG,WAAOC,EAA8EC,GAArF,iBAAAC,EAAA,6DAClB9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBACjB/B,EAASN,EAAWR,aAAa,CAACJ,OAAQ,aAFjB,kBAIR+C,IAJQ,+EAMrBzB,EAAyB,EAAD,GAAIJ,GANP,kBAOd+B,EAAgB,OAPF,yBASrB/B,EAASN,EAAWR,aAAa,CAACJ,OAAQ,UATrB,4EAAH,wDCKpBkD,EAAiBtB,EACtB,2BADyC,uCACb,WAAOuB,EAAGL,GAAV,SAAAE,EAAA,+EAClBH,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,sEACTZ,IADS,cACrBgB,EADqB,yBAEpB,CAACC,UAAWD,EAAInC,OAFI,6CADN,2CADa,yDAQpCqC,EAAiB1B,EACtB,2BADyC,uCACb,WAAOY,EAAYM,GAAnB,iBAAAE,EAAA,6DAClB9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADQ,kBAElBJ,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,6DAC3B9B,EAASqC,EAAiBC,6BAA6B,CAAChB,aAAYiB,aAAc,aADvD,SAETrB,EAA2BI,GAFlB,WAErBY,EAFqB,QAGnBnC,KAAKyC,aAAed,EAHD,yCAIhB,CAACJ,eAJe,cAMvBxB,EAAqBoC,EAAInC,KAAMC,GANR,kBAOhB+B,EAAgB,OAPA,8CAFN,2CADa,yDAepCU,EAAc/B,EACnB,wBADsC,uCACb,WAAOU,EAAOQ,GAAd,iBAAAE,EAAA,6DACf9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADK,kBAEfJ,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,sEACTZ,EAA2BE,GADlB,WACrBc,EADqB,QAEnBnC,KAAKyC,aAAed,EAFD,yCAGhB,CAACgB,SAAUR,EAAInC,KAAKA,KAAK4C,OAHT,cAKvB7C,EAAqBoC,EAAInC,KAAMC,GALR,kBAMhB+B,EAAgB,OANA,6CAFT,2CADa,yDAcjCa,EAAsBlC,EAC3B,gCAD8C,uCACb,WAAOc,EAAKI,GAAZ,iBAAAE,EAAA,6DACvB9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADa,kBAEvBJ,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,sEACTZ,EAA2BM,GADlB,WACrBU,EADqB,QAEnBnC,KAAKyC,aAAed,EAFD,yCAGhBF,GAHgB,cAKvB1B,EAAqBoC,EAAInC,KAAMC,GALR,kBAMhB+B,EAAgB,OANA,6CAFD,2CADa,yDAgBzCrD,EAAQC,YAAY,CAClBC,KAAM,YACNC,aAJwC,GAKxCI,SAAU,CACN4D,qBADM,SACe1D,EAAOC,GACxB,IAAM0D,EAAQ3D,EAAM4D,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAO7D,EAAOC,QAAQiC,cAC7DnC,EAAM2D,GAAOI,OAAS9D,EAAOC,QAAQ6D,QAEzCZ,6BALM,SAKuBnD,EAAOC,GAChC,IAAM0D,EAAQ3D,EAAM4D,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAO7D,EAAOC,QAAQiC,cAC7DnC,EAAM2D,GAAOP,aAAenD,EAAOC,QAAQkD,eAGnDY,cAAe,SAAAC,GACXA,EACKC,QAAQrB,EAAesB,WAAW,SAACnE,EAAOC,GACvC,OAAOA,EAAOC,QAAQ8C,UAAUoB,KAAI,SAAAP,GAAE,kCAASA,GAAT,IAAaE,OAAQ,MAAOX,aAAc,eAEnFc,QAAQjB,EAAekB,WAAW,SAACnE,EAAOC,GACvC,IAAM0D,EAAQ3D,EAAM4D,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAO7D,EAAOC,QAAQiC,cACzDwB,GAAS,GACT3D,EAAMqE,OAAOV,EAAO,MAG3BO,QAAQZ,EAAYa,WAAW,SAACnE,EAAOC,GACpCD,EAAMsE,QAAN,2BAAkBrE,EAAOC,QAAQqD,UAAjC,IAA2CQ,OAAQ,MAAOX,aAAc,aAE3Ec,QAAQT,EAAoBU,WAAW,SAACnE,EAAOC,GAC5C,IAAM0D,EAAQ3D,EAAM4D,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAO7D,EAAOC,QAAQiC,cAC7DnC,EAAM2D,GAAO1B,MAAQhC,EAAOC,QAAQ+B,SAEvCiC,QAAQzD,GAAwB,WAC7B,MAAO,SAKd8D,EAAmBhF,EAAMe,QAEzBkE,EAAkB,CAAC3B,iBAAgBI,iBAAgBK,cAAaG,uBAEhEP,EAAmB3D,EAAMiB,QCnGzBiE,EAAW,SACXtC,GACL,OAAOT,EAASM,IAAT,qBAAiDG,EAAjD,YAFFsC,EAAW,SAITpC,GACP,OAAOX,EAASQ,KAAT,qBACWG,EAAIF,WADf,UACmC,CAACF,MAAOI,EAAIJ,SANjDwC,EAAW,SAQTpC,GACP,OAAOX,EAASU,OAAT,qBAA4CC,EAAIF,WAAhD,kBAAoEE,EAAIqC,UAT1ED,EAAW,SAWTtC,EAAoBuC,EAAgBC,GAC3C,OAAOjD,EAASY,IAAT,qBACWH,EADX,kBAC+BuC,GAAUC,ICPlDC,EAAarD,EAClB,mBADqC,uCACjB,WAAOY,EAAoBM,GAA3B,SAAAE,EAAA,+EACVH,EAAcC,EAAD,sBAAW,8BAAAE,EAAA,sEACT8B,EAAkBtC,GADT,cACrBY,EADqB,OAErB8B,EAAQ9B,EAAInC,KAAKkE,MAFI,kBAGpB,CAACD,QAAO1C,eAHY,6CADd,2CADiB,yDAShC4C,EAAUxD,EACf,gBADkC,uCACjB,WAAOc,EAAKI,GAAZ,iBAAAE,EAAA,6DACP9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADH,kBAEPJ,EAAcC,EAAD,sBAAW,8BAAAE,EAAA,sEACT8B,EAAoBpC,GADX,UACrBU,EADqB,OAErBiC,EAAOjC,EAAInC,KAAKA,KAAK4C,KACvBT,EAAInC,KAAKyC,aAAed,EAHD,yCAIhB,CAACyC,SAJe,cAMvBrE,EAAqBoC,EAAInC,KAAMC,GANR,kBAOhB+B,EAAgB,OAPA,8CAFjB,2CADiB,yDAe7BqC,EAAa1D,EAClB,mBADqC,uCACjB,WAAOc,EAAKI,GAAZ,mBAAAE,EAAA,6DACV9B,EAAuC4B,EAAvC5B,SAAU+B,EAA6BH,EAA7BG,gBAAiBsC,EAAYzC,EAAZyC,SADjB,kBAEV1C,EAAcC,EAAD,sBAAW,kCAAAE,EAAA,yDACrBwC,EAA0BD,IAAWL,MAAMxC,EAAIF,YAC/C6C,EAAOG,EAAwBC,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,KAAOzB,EAAIqC,UAFjC,uBAIvB7D,EAASN,EAAWJ,YAAY,CAACP,MAAO,iCAJjB,kBAKhBgD,EAAgB,OALA,cAOrB0C,EAPqB,aAQvBrD,MAAO+C,EAAK/C,MACZsD,UAAWP,EAAKO,UAChBC,SAAUR,EAAKQ,SACfC,YAAaT,EAAKS,YAClBC,SAAUV,EAAKU,SACf/F,OAAQqF,EAAKrF,QACV0C,EAAIsD,aAdgB,SAgBTlB,EAAoBpC,EAAIF,WAAYE,EAAIqC,OAAQY,GAhBvC,WAgBrBvC,EAhBqB,QAiBnBnC,KAAKyC,aAAed,EAjBD,0CAkBhBF,GAlBgB,eAoBvB1B,EAAqBoC,EAAInC,KAAMC,GApBR,kBAqBhB+B,EAAgB,OArBA,8CAFd,2CADiB,yDA6BhCgD,EAAarE,EAClB,mBADqC,uCACjB,WAAOc,EAAKI,GAAZ,iBAAAE,EAAA,6DACV9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADA,kBAEVJ,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,6DAC3B9B,EAASgF,EAAaC,yBAAyB,CAAC3D,WAAYE,EAAIF,WAAYuC,OAAQrC,EAAIqC,OAAQtB,aAAc,aADnF,SAETqB,EAAoBpC,GAFX,WAErBU,EAFqB,QAGnBnC,KAAKyC,aAAed,EAHD,yCAIhBF,GAJgB,cAMvB1B,EAAqBoC,EAAInC,KAAMC,GANR,kBAOhB+B,EAAgB,OAPA,8CAFd,2CADiB,yDAiBhCrD,EAAQC,YAAY,CAClBC,KAAM,QACNC,aAJ6B,GAK7BI,SAAU,CACNgG,yBADM,SACmB9F,EAAOC,GAC5B,IAAM4E,EAAQ7E,EAAMC,EAAOC,QAAQiC,YAC7BwB,EAAQkB,EAAMjB,WAAU,SAAAyB,GAAC,OAAIA,EAAEvB,KAAO7D,EAAOC,QAAQwE,UACvDf,GAAS,IACTkB,EAAMlB,GAAN,2BAAmBkB,EAAMlB,IAAzB,IAAiCP,aAAcnD,EAAOC,QAAQkD,kBAI1EY,cAAe,SAAAC,GACXA,EACKC,QAAQU,EAAWT,WAAW,SAACnE,EAAOC,GACnCD,EAAMC,EAAOC,QAAQiC,YAAclC,EAAOC,QAAQ2E,SAErDX,QAAQa,EAAQZ,WAAW,SAACnE,EAAOC,GAChCD,EAAMC,EAAOC,QAAQ8E,KAAKe,YAAYzB,QAAQrE,EAAOC,QAAQ8E,SAEhEd,QAAQe,EAAWd,WAAW,SAACnE,EAAOC,GACnC,IAAM4E,EAAQ7E,EAAMC,EAAOC,QAAQiC,YAC7BwB,EAAQkB,EAAMjB,WAAU,SAAAyB,GAAC,OAAIA,EAAEvB,KAAO7D,EAAOC,QAAQwE,WAC5C,IAAXf,IACAkB,EAAMlB,GAAN,2BAAmBkB,EAAMlB,IAAW1D,EAAOC,QAAQyF,iBAG1DzB,QAAQ0B,EAAWzB,WAAW,SAACnE,EAAOC,GACnC,IAAM4E,EAAQ7E,EAAMC,EAAOC,QAAQiC,YAC7BwB,EAAQkB,EAAMjB,WAAU,SAAAyB,GAAC,OAAIA,EAAEvB,KAAO7D,EAAOC,QAAQwE,WAC5C,IAAXf,GACAkB,EAAMR,OAAOV,EAAO,MAG3BO,QAAQM,EAAgBlB,YAAYa,WAAW,SAACnE,EAAOC,GACpDD,EAAMC,EAAOC,QAAQqD,SAASO,IAAM,MAEvCI,QAAQM,EAAgBvB,eAAekB,WAAW,SAACnE,EAAOC,UAChDD,EAAMC,EAAOC,QAAQiC,eAE/B+B,QAAQM,EAAgB3B,eAAesB,WAAW,SAACnE,EAAOC,GACvDA,EAAOC,QAAQ8C,UAAUgD,SAAQ,SAACnC,GAC9B7D,EAAM6D,EAAGC,IAAM,SAGtBI,QAAQzD,GAAwB,WAC7B,MAAO,SAMdwF,EAAe1G,EAAMe,QAErB4F,EAAc,CAACtB,aAAYG,UAASE,aAAYW,cAEhDC,EAAetG,EAAMiB,Q,SCtIrB2F,EAAU,SACbjG,GACF,OAAOwB,EAASQ,KACZ,aAAchC,IAHbiG,GAAU,WAMf,OAAOzE,EAASU,OAAqB,eANhC+D,GAAU,WASf,OAAOzE,EAASM,IAAiC,YCHnDoE,GAAQ7E,EACb,aADgC,uCAClB,WAAOc,EAAKI,GAAZ,iBAAAE,EAAA,6DACJ9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADN,kBAEJJ,EAAcC,EAAD,sBAAW,8BAAAE,EAAA,sEACTwD,EAAc9D,GADL,WACrBU,EADqB,QAEnBnC,KAAKyC,aAAed,EAFD,yCAGhB,CAAC8D,YAAY,IAHG,cAKjBC,GAAkBvD,EAAInC,KAAK2F,aAAavF,OAC9CL,EAAqBoC,EAAInC,KAAMC,EAAUyF,GANlB,kBAOhB1D,EAAgBG,EAAInC,OAPJ,8CAFpB,2CADkB,yDAe3B4F,GAASjF,EACd,cADiC,uCAClB,WAAOuB,EAAGL,GAAV,iBAAAE,EAAA,6DACL9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADL,kBAELJ,EAAcC,EAAD,sBAAW,4BAAAE,EAAA,sEACTwD,KADS,WACrBpD,EADqB,QAEnBnC,KAAKyC,aAAed,EAFD,uBAGvB1B,EAASJ,KAHc,kBAIhB,CAAC4F,YAAY,IAJG,cAMvB1F,EAAqBoC,EAAInC,KAAMC,GANR,kBAOhB+B,EAAgBG,EAAInC,OAPJ,8CAFnB,2CADkB,yDAe5B6F,GAAgBlF,EACrB,oBADwC,uCACnB,WAAOuB,EAAGL,GAAV,iBAAAE,EAAA,6DACX9B,EAA6B4B,EAA7B5B,SAAU+B,EAAmBH,EAAnBG,gBADC,kBAGIuD,KAHJ,iBAINvF,KAAKyC,aAAed,EAJd,yCAKH,CAAC8D,YAAY,IALV,gCAOHzD,EAAgB,OAPb,iEAUd3B,EAAyB,EAAD,GAAIJ,GAVd,kBAWP+B,EAAgB,OAXT,yBAad/B,EAASN,EAAWH,iBAAiB,CAACP,eAAe,KAbvC,6EADmB,yDAwC5B6G,GAlBClH,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjB2G,YAAY,GAMZvG,SAAU,GACVkE,cAAe,SAAAC,GACXA,EACKC,QAAQyC,GAAWP,MAAMjC,WAAW,SAACnE,EAAOC,GACzCD,EAAMqG,WAAapG,EAAOC,QAAQmG,cAErCnC,QAAQyC,GAAWH,OAAOrC,WAAW,SAACnE,EAAOC,GAC1CD,EAAMqG,WAAapG,EAAOC,QAAQmG,cAErCnC,QAAQyC,GAAWF,cAActC,WAAW,SAACnE,EAAOC,GACjDD,EAAMqG,WAAapG,EAAOC,QAAQmG,iBAKjB/F,QACpBqG,GAAa,CAACP,SAAOI,UAAQC,kBCzEpCG,GAAcC,YAAgB,CAChC7D,UAAWuB,EACXM,MAAOoB,EACPa,IAAKzG,EACL0G,KAAML,KAGGM,GAAQC,YAAe,CAChC3G,QAASsG,GACTM,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,QAAQC,QAQzEpI,OAAO+H,MAAQA,G,kDChBFM,GAAcC,IAAMC,MAAK,YAAwD,IAAtDC,EAAqD,EAArDA,QAAqD,IAA5CC,gBAA4C,SACzF,EAAsCC,mBAAiB,IAAvD,oBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,oBAAkB,GAA1C,oBAAK/H,EAAL,KAAYkI,EAAZ,KAOM/C,EAAU,WACgB,KAAxB6C,EAAaG,OACbN,EAAQG,EAAaG,QAErBD,GAAS,GAEbD,EAAgB,KASpB,OACI,6BACI,kBAACG,GAAA,EAAD,CACIC,MAAOL,EACPM,SAxBY,SAAChH,GACrB4G,GAAS,GACTD,EAAgB3G,EAAEiH,cAAcF,QAuBxBG,WAXc,SAAClH,GACT,UAAVA,EAAEmH,KACFtD,KAUI2C,SAAUA,EACVY,KAAM,QACN1I,MAAOA,EACP2I,WAAY3I,GAAS,qBACrB4I,MAAO,QACPC,QAAS,aAEb,kBAACC,GAAA,EAAD,CACIC,QAAS5D,EACT6D,MAAO,UACPlB,SAAUA,GAEV,kBAACmB,GAAA,EAAD,WC3CHC,GAAevB,IAAMC,MAAK,YAAoE,IAAlEvF,EAAiE,EAAjEA,MAAO8G,EAA0D,EAA1DA,YAA0D,IAA7CrB,gBAA6C,SACtG,EAA8BC,oBAAkB,GAAhD,oBAAKqB,EAAL,KAAeC,EAAf,KACA,EAA8BtB,mBAAiB1F,GAA/C,oBAAKiH,EAAL,KAAeC,EAAf,KAWMC,EAAc,WAChBH,GAAY,GACZF,EAAYG,IAShB,OACIF,EACM,kBAAChB,GAAA,EAAD,CACEE,SAvBe,SAAChH,GACxBiI,EAAYjI,EAAEiH,cAAcF,QAuBpBA,MAAOiB,EACPG,OAAQD,EACRE,WAAS,EACTlB,WAbkB,SAAClH,GACb,UAAVA,EAAEmH,KACFe,OAaE,0BAAMG,cA1BG,WACX7B,GAGJuB,GAAY,KAsB4BhH,M,oBCxCnCuH,GAAsB,SAACxJ,GAAD,OAAyBA,EAAM8G,IAAIjH,eACzD4J,GAAe,SAACzJ,GAAD,OAAyBA,EAAM8G,IAAInH,QAClD+J,GAAc,SAAC1J,GAAD,OAAyBA,EAAM8G,IAAIlH,OCAjD+J,GAAoCC,ICCpCC,GAAa,SAAoCrJ,GAC1D,IAAMK,EAAW8I,KAEjB,OAAOG,mBACH,kBAAMC,YAA8CvJ,EAASK,KAC7D,CAACL,EAASK,KCFZmJ,GAAQzC,IAAM0C,YAAuC,SACvDC,EAAOC,GACP,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAK1B,QAAQ,UAAayB,OAG3D,SAASG,KAEZ,IAAMzK,EAAQ0K,YAAYZ,IACnBvJ,EAAe0J,GAAWtJ,GAA1BJ,YAEDoK,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJtK,EAAY,CAACP,MAAO,QAExB,OACI,kBAAC8K,GAAA,EAAD,CAAUC,KAAgB,OAAV/K,EAAgBgL,iBAAkB,IAAMC,QAASN,GAC7D,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,SACrDpL,I,cCnBJqL,GAAoCzD,gBAAK,YAAiB,IAAfjE,EAAc,EAAdA,SAE7CG,EAAwBmG,GAAW3G,GAAnCQ,qBAEDwH,EAAsB,SAACnH,GACzBL,EAAqB,CAACvB,WAAYoB,EAASO,GAAIC,YAGnD,OACI,6BACI,kBAACoH,GAAA,EAAD,CAAQ1C,QAA6B,QAApBlF,EAASQ,OAAmB,WAAa,OAClD4E,QAAS,kBAAMuC,EAAoB,QACnCtC,MAAO,WAFf,OAKA,kBAACuC,GAAA,EAAD,CAAQ1C,QAA6B,WAApBlF,EAASQ,OAAsB,WAAa,OACrD4E,QAAS,kBAAMuC,EAAoB,WACnCtC,MAAO,WAFf,UAIA,kBAACuC,GAAA,EAAD,CAAQ1C,QAA6B,cAApBlF,EAASQ,OAAyB,WAAa,OACxD4E,QAAS,kBAAMuC,EAAoB,cACnCtC,MAAO,aAFf,iB,yCCVCwC,GAAsB7D,IAAMC,MAAM,YAAyB,IAAvBxC,EAAsB,EAAtBA,KAAM7C,EAAgB,EAAhBA,WAEnD,EAAiC0H,GAAW3D,GAArCN,EAAP,EAAOA,WAAYX,EAAnB,EAAmBA,WAcnB,OAAO,yBAAKoD,IAAKrD,EAAKlB,GAAIuH,UAAWrG,EAAKrF,SAAWN,EAAaiM,UAAYC,KAAEC,OAAS,IACrF,kBAACC,GAAA,EAAD,CACIC,QAAS1G,EAAKrF,SAAWN,EAAaiM,UACtC1C,MAAM,UACNV,SAdoB,SAAChH,GACzB,IAAMvB,EAASuB,EAAEiH,cAAcuD,QAAUrM,EAAaiM,UAAYjM,EAAasM,IAC/E1G,EAAW,CAAC9C,aAAYuC,OAAQM,EAAKlB,GAAI6B,YAAa,CAAChG,aAanD+H,SAAgC,YAAtB1C,EAAK5B,eAEnB,kBAAC0F,GAAD,CAAc7G,MAAO+C,EAAK/C,MAAO8G,YAXV,SAAC9G,GACxBgD,EAAW,CAAC9C,aAAYuC,OAAQM,EAAKlB,GAAI6B,YAAa,CAAC1D,YAUWyF,SAAgC,YAAtB1C,EAAK5B,eACjF,kBAACsF,GAAA,EAAD,CAAYC,QApBU,kBAAM/C,EAAW,CAAClB,OAAQM,EAAKlB,GAAI3B,gBAoBjBuF,SAAgC,YAAtB1C,EAAK5B,cACnD,kBAACwI,GAAA,EAAD,WC/BCC,GAAuBrE,gBAAK,YAAwB,IAAtB3C,EAAqB,EAArBA,MAAOtB,EAAc,EAAdA,SAE1CuI,EAAmBjH,EASvB,MAPwB,WAApBtB,EAASQ,SACT+H,EAAmBjH,EAAMd,QAAO,SAAAsB,GAAC,OAAIA,EAAE1F,SAAWN,EAAasM,QAE3C,cAApBpI,EAASQ,SACT+H,EAAmBjH,EAAMd,QAAO,SAAAsB,GAAC,OAAIA,EAAE1F,SAAWN,EAAaiM,cAI/D,oCAAGQ,EAAiB1H,KAAI,SAAAiB,GAAC,OAAI,kBAAC+F,GAAD,CAAMpG,KAAMK,EAAGlD,WAAYoB,EAASO,GAAIuE,IAAKhD,EAAEvB,YCZvEiI,GAA+BvE,gBAAK,YAAiB,IAAfjE,EAAc,EAAdA,SAE/C,EAA8CsG,GAAWrF,GAAlDvB,EAAP,EAAOA,eAAgBQ,EAAvB,EAAuBA,oBAUvB,OACI,4BAAI,kBAACqF,GAAD,CAAc7G,MAAOsB,EAAStB,MAAO8G,YALV,SAAC9G,GAChCwB,EAAoB,CAACtB,WAAYoB,EAASO,GAAI7B,WAK5ByF,SAAoC,YAA1BnE,EAASH,eACjC,kBAACsF,GAAA,EAAD,CAAYC,QAXU,WAC1B1F,EAAeM,EAASO,KAUwB4D,SAAoC,YAA1BnE,EAASH,cAC3D,kBAACwI,GAAA,EAAD,WCZHI,GAA0BxE,gBAAK,YAAwB,IAAtBjE,EAAqB,EAArBA,SAAUsB,EAAW,EAAXA,MAEpD,EAA8BgF,GAAW3D,GAAlCtB,EAAP,EAAOA,WAAYG,EAAnB,EAAmBA,QAEnBkH,qBAAU,WACNrH,EAAWrB,EAASO,MACrB,IAMH,OAAO,6BACH,kBAACiI,GAAD,CAAexI,SAAUA,IACzB,kBAAC+D,GAAD,CAAaG,QANO,SAACxF,GACrB8C,EAAQ,CAAC5C,WAAYoB,EAASO,GAAI7B,WAKKyF,SAAoC,YAA1BnE,EAASH,eAC1D,kBAACyI,GAAD,CAAOtI,SAAUA,EAAUsB,MAAOA,IAClC,yBAAKqH,MAAO,CAACC,WAAY,SACrB,kBAAClB,GAAD,CAAoB1H,SAAUA,S,6BC9B7B6I,GAAmB,SAACpM,GAAD,OAAyBA,EAAM+G,KAAKV,YCAvDgG,GAAc,SAACrM,GAAD,OAAyBA,EAAM6E,OCA7CyH,GAAkB,SAACtM,GAAD,OAAyBA,EAAMgD,WCWjDuJ,GAA0B,WAEnC,IAAMvJ,EAAYsH,YAAYgC,IACxBzH,EAAQyF,YAAY+B,IACpBhG,EAAaiE,YAAY8B,IAE/B,EAAuCvC,GAAWrF,GAA1C3B,EAAR,EAAQA,eAAgBS,EAAxB,EAAwBA,YAExB2I,qBAAU,WACD5F,GAGLxD,EAAe,MAChB,IAMH,OAAKwD,EAGE,oCACH,kBAACmG,GAAA,EAAD,CAAMC,WAAS,EAACP,MAAO,CAACQ,QAAS,SAC7B,kBAACpF,GAAD,CAAaG,QATO,SAACxF,GACzBqB,EAAYrB,OAUZ,kBAACuK,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjB3J,EAAUoB,KAAI,SAAAP,GACV,IAAI+I,EAAmB/H,EAAMhB,EAAGC,IAEhC,OAAO,kBAAC0I,GAAA,EAAD,CAAMhJ,MAAI,EAAC6E,IAAKxE,EAAGC,IACtB,kBAAC+I,GAAA,EAAD,CAAOX,MAAO,CAACQ,QAAS,SACpB,kBAACV,GAAD,CACIzI,SAAUM,EACVgB,MAAO+H,WAfxB,kBAAC,KAAD,CAAUE,GAAI,Y,8GCfhBC,GAAQ,WAEjB,IAAO3G,EAASyD,GAAWlD,IAApBP,MACDC,EAAaiE,YAAY8B,IAEzBY,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAY1D,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,oBAKdI,EAAOH,SAEDG,EAAOH,SAASpM,OAAS,IAChCwM,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAACH,EAAyBI,GAChCvH,EAAMmH,GACDK,SACAC,OAAM,SAACpD,GACmBA,EAAhBlE,cAEHkE,EAAOlE,aAAaP,SAAQ,SAAC8H,GACzBH,EAAcI,cAAcD,EAAWE,MAAOF,EAAWlO,gBAOjF,OAAIyG,EACO,kBAAC,KAAD,CAAUyG,GAAI,MAGlB,kBAACN,GAAA,EAAD,CAAMC,WAAS,EAACwB,eAAgB,UACnC,kBAACzB,GAAA,EAAD,CAAMhJ,MAAI,EAACyK,eAAgB,UACvB,0BAAMP,SAAUV,EAAOkB,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,cADzB,UAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACxG,GAAA,EAAD,eAAWQ,MAAM,QACNiG,OAAO,UACHzB,EAAO0B,cAAc,SAFpC,CAGWrF,OAAQ2D,EAAO2B,cAEzB3B,EAAO4B,QAAQzB,OAASH,EAAOQ,OAAOL,MACnC,yBAAKjB,MAAO,CAACtD,MAAO,QAASoE,EAAOQ,OAAOL,OAAe,KAC9D,kBAACnF,GAAA,EAAD,eAAW6G,KAAK,WACLrG,MAAM,WACNiG,OAAO,UACHzB,EAAO0B,cAAc,YAHpC,CAIWrF,OAAQ2D,EAAO2B,cAEzB3B,EAAO4B,QAAQxB,UAAYJ,EAAOQ,OAAOJ,SACtC,yBAAKlB,MAAO,CAACtD,MAAO,QAASoE,EAAOQ,OAAOJ,UAAkB,KACjE,kBAAC0B,GAAA,EAAD,CAAkBtG,MAAO,cACPuG,QAAS,kBAACtD,GAAA,EAAD,CAAUvD,SAAU8E,EAAOgC,aACjBtD,QAASsB,EAAOO,OAAOF,WACvB5N,KAAK,iBAE1C,kBAAC0L,GAAA,EAAD,CAAQ0D,KAAM,SACNpG,QAAS,YACTf,WAAYsF,EAAOiC,SAAWjC,EAAOkC,OACrCtG,MAAO,WAHf,e,UCxBTuG,OAnDf,WAEI,IAAMxP,EAAS2K,YAAYb,IACrB5J,EAAgByK,YAAYd,IAC5BnD,EAAaiE,YAAY8B,IAE/B,EAAgCvC,GAAWlD,IAApCF,EAAP,EAAOA,cAAeD,EAAtB,EAAsBA,OAStB,OAPAyF,qBAAU,WACNxF,EAAc,MACf,IAKE5G,EAQD,yBAAKwL,UAAU,OACX,kBAAChB,GAAD,MACA,kBAAC+E,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KACI,kBAAC5G,GAAA,EAAD,CAAY6G,KAAK,QAAQ3G,MAAM,UAAU4G,aAAW,QAChD,kBAACC,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CAAYjH,QAAQ,MAApB,SAGEpC,GAAc,kBAAC8E,GAAA,EAAD,CAAQvC,MAAM,WAAd,SACfvC,GAAc,kBAAC8E,GAAA,EAAD,CAAQvC,MAAM,UAAUD,QAtBjC,kBAAMnC,EAAO,MAsBJ,WAEP,YAAX7G,GAAwB,kBAACgQ,GAAA,EAAD,OAE7B,kBAACC,GAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAO,IAAIC,QAAW,kBAAC,GAAD,QAC7B,kBAAC,KAAD,CAAOD,KAAO,YAAYC,QAAW,kBAAC,GAAD,QACrC,kBAAC,KAAD,CAAOD,KAAO,SAASC,QAAW,kBAAC,GAAD,QAClC,kBAAC,KAAD,CAAOD,KAAO,OAAOC,QAAW,qDAChC,kBAAC,KAAD,CAAOD,KAAO,IAAIC,QAAW,kBAAC,KAAD,CAAUjD,GAAG,cA5B/C,yBACHZ,MAAO,CAACmD,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAUjF,MAAO,SACnE,kBAACkF,GAAA,EAAD,Q,SC/BZC,IAASC,OACL,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAUpJ,MAAOA,IACb,kBAAC,GAAD,QAGLqJ,SAASC,eAAe,SjC4HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd/C,OAAM,SAAAjO,GACLiR,QAAQjR,MAAMA,EAAM0B,c","file":"static/js/main.adce5aff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"styles_isDone__2f2Qf\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const ResultCode = {\r\n    Success: 0,\r\n    Error: 1,\r\n    Captcha: 10,\r\n} as const","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// state\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState,\r\n        reducers: {\r\n            setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const clearTasksAndTodolists = createAction('common/clear-tasks-todolists')","import {appActions} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ResponseType } from '../types';\r\n\r\n/**\r\n * Данная функция обрабатывает ошибки, которые могут возникнуть при взаимодействии с сервером.\r\n * @param data  - ответ от сервера в формате ResponseType<D>\r\n * @param dispatch - функция для отправки сообщений в store Redux\r\n * @param showError - флаг, указывающий, нужно ли отображать ошибки в пользовательском интерфейсе\r\n */\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch, showError: boolean = true) => {\r\n    if (showError) {\r\n        dispatch(appActions.setAppError( {error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\n/**\r\n * Обрабатывает ошибки сети, возникающие при отправке запросов на сервер\r\n * @param {unknown} e - Ошибка, которая произошла при отправке запроса на сервер\r\n * @param {Dispatch} dispatch - Функция dispatch из библиотеки Redux для отправки actions\r\n * @returns {void}\r\n */\r\nexport const handleServerNetworkError = (e: unknown, dispatch: Dispatch) => {\r\n    const err = e as Error | AxiosError<{ error: string }>\r\n    if (axios.isAxiosError(err)) {\r\n        const error = err.message ? err.message : 'Some error occurred'\r\n        dispatch(appActions.setAppError({error}))\r\n    } else {\r\n        dispatch(appActions.setAppError({error: `Native error ${err.message}`}))\r\n    }\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppStateType} from \"../../app/store\";\r\nimport {ResponseType} from \"../types\";\r\n\r\n/**\r\n Эта функция предназначена для того, чтобы избавиться от дублирования кода по созданию типов в санке\r\n */\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: null | ResponseType\r\n}>()","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})","import {AxiosResponse} from 'axios'\r\nimport { instance } from '../../../common/api';\r\nimport { ResponseType } from '../../../common/types';\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(arg: UpdateTodolistTitleArgType) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${arg.todolistId}`,\r\n            {title: arg.title})\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type UpdateTodolistTitleArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n","import {AppDispatch, AppStateType} from '../../app/store';\r\nimport {handleServerNetworkError} from \"./handle-server-network-error\";\r\nimport {BaseThunkAPI} from \"@reduxjs/toolkit/dist/createAsyncThunk\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\nimport {ResponseType} from \"../types\";\r\n\r\n\r\nexport const thunkTryCatch = async (thunkAPI: BaseThunkAPI<AppStateType, any, AppDispatch, null | ResponseType >, logic: Function) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        return await logic()\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(appActions.setAppStatus({status: 'idle'}))\r\n    }\r\n}","import {RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearTasksAndTodolists} from \"../../../common/actions\";\r\nimport {createAppAsyncThunk} from \"../../../common/utils\";\r\nimport {handleServerAppError} from \"../../../common/utils\";\r\nimport {todolistAPI, TodolistType, UpdateTodolistTitleArgType} from \"./todolist-api\";\r\nimport { ResultCode } from \"../../../common/enums\";\r\nimport {thunkTryCatch} from \"../../../common/utils/thunk-try-catch\";\r\n\r\n\r\n//state\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodolistType[] }, void>\r\n('todolists/fetchTodolists', async (_, thunkAPI) => {\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await todolistAPI.getTodolists()\r\n        return {todolists: res.data}\r\n    })\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ todolistId: string }, string>\r\n('todolists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        dispatch(todolistsActions.changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst addTodolist = createAppAsyncThunk<{ todolist: TodolistType }, string>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst changeTodolistTitle = createAppAsyncThunk<UpdateTodolistTitleArgType, UpdateTodolistTitleArgType>\r\n('todolists/changeTodolistTitle', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await todolistAPI.updateTodolist(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState,\r\n        reducers: {\r\n            changeTodolistFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                    return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n                })\r\n                .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    if (index > -1) {\r\n                        state.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(addTodolist.fulfilled, (state, action) => {\r\n                    state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n                })\r\n                .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    state[index].title = action.payload.title\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return []\r\n                })\r\n        }\r\n    }\r\n)\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsThunks = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {AxiosResponse} from 'axios'\r\nimport { instance } from '../../../common/api';\r\nimport { ResponseType } from '../../../common/types';\r\nimport {TaskPriorities, TaskStatuses} from \"../../../common/enums\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n// api\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(arg: AddTaskArgType) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${arg.todolistId}/tasks`, {title: arg.title})\r\n    },\r\n    deleteTask(arg: RemoveTaskArgType) {\r\n        return instance.delete<ResponseType>(`todo-lists/${arg.todolistId}/tasks/${arg.taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport type AddTaskArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type RemoveTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n}","import {appActions, RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsThunks} from \"../todolists/todolists-reducer\";\r\nimport {createAppAsyncThunk} from \"../../../common/utils\";\r\nimport {clearTasksAndTodolists} from \"../../../common/actions\";\r\nimport {handleServerAppError} from \"../../../common/utils\";\r\nimport {ResultCode, TaskPriorities, TaskStatuses} from \"../../../common/enums\";\r\nimport {thunkTryCatch} from \"../../../common/utils/thunk-try-catch\";\r\nimport {AddTaskArgType, RemoveTaskArgType, tasksApi, TaskType, UpdateTaskModelType} from \"./tasks-api\";\r\n\r\n\r\n// state\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>\r\n('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await tasksApi.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId}\r\n    })\r\n})\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>\r\n('tasks/addTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await tasksApi.createTask(arg)\r\n        const task = res.data.data.item\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTaskArgType, UpdateTaskArgType>\r\n('tasks/updateTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const tasksForCurrentTodolist = getState().tasks[arg.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === arg.taskId)\r\n        if (!task) {\r\n            dispatch(appActions.setAppError({error: 'Task not found in the state'}))\r\n            return rejectWithValue(null)\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...arg.domainModel\r\n        }\r\n        const res = await tasksApi.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst removeTask = createAppAsyncThunk<RemoveTaskArgType, RemoveTaskArgType>\r\n('tasks/removeTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        dispatch(tasksActions.changeTaskEntityStatusAC({todolistId: arg.todolistId, taskId: arg.taskId, entityStatus: 'loading'}))\r\n        const res = await tasksApi.deleteTask(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n})\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState,\r\n        reducers: {\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                    state[action.payload.todolistId] = action.payload.tasks\r\n                })\r\n                .addCase(addTask.fulfilled, (state, action) => {\r\n                    state[action.payload.task.todoListId].unshift(action.payload.task)\r\n                })\r\n                .addCase(updateTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                    }\r\n                })\r\n                .addCase(removeTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(todolistsThunks.addTodolist.fulfilled, (state, action) => {\r\n                    state[action.payload.todolist.id] = []\r\n                })\r\n                .addCase(todolistsThunks.removeTodolist.fulfilled, (state, action) => {\r\n                    delete state[action.payload.todolistId]\r\n                })\r\n                .addCase(todolistsThunks.fetchTodolists.fulfilled, (state, action) => {\r\n                    action.payload.todolists.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return {}\r\n                })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\nexport const tasksThunks = {fetchTasks, addTask, updateTask, removeTask}\r\n\r\nexport const tasksActions = slice.actions\r\n\r\n//types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype UpdateTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n    domainModel: UpdateDomainTaskModelType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"../../common/types\";\r\nimport {instance} from \"../../common/api\";\r\n\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {createAppAsyncThunk, handleServerAppError} from \"../../common/utils\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {authAPI, LoginParamsType} from \"./auth-api\";\r\nimport {ResultCode} from \"../../common/enums\";\r\nimport {thunkTryCatch} from \"../../common/utils/thunk-try-catch\";\r\n\r\n//state\r\n\r\nconst login = createAppAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType>\r\n('auth/login', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await authAPI.login(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            const isShowAppError = !res.data.fieldsErrors.length\r\n            handleServerAppError(res.data, dispatch, isShowAppError)\r\n            return rejectWithValue(res.data)\r\n        }\r\n    })\r\n})\r\n\r\nconst logout = createAppAsyncThunk<{ isLoggedIn: boolean }, void>\r\n('auth/logout', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    return thunkTryCatch(thunkAPI, async () => {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(clearTasksAndTodolists())\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(res.data)\r\n        }\r\n    })\r\n})\r\n\r\nconst initializeApp = createAppAsyncThunk<{ isLoggedIn: true }, void>\r\n('app/initializeApp', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(appActions.setIsInitialized({isInitialized: true}))\r\n    }\r\n})\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(authThunks.login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.initializeApp.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authThunks = {login, logout, initializeApp}\r\n\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/todolists-list/tasks/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/todolists-list/todolists/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppStateType) => state.app.isInitialized\r\nexport const selectStatus = (state: AppStateType) => state.app.status\r\nexport const selectError = (state: AppStateType) => state.app.error","import { useDispatch } from 'react-redux';\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch","import { useMemo } from 'react'\r\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux'\r\nimport {useAppDispatch} from \"./useAppDispatch\";\r\n\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(\r\n        () => bindActionCreators<T, RemapActionCreators<T>>(actions, dispatch),\r\n        [actions, dispatch]\r\n    )\r\n}\r\n\r\n// Types\r\ntype IsValidArg<T> = T extends object ? (keyof T extends never ? false : true) : true\r\ntype ActionCreatorResponse<T extends (...args: any[]) => any> = ReturnType<ReturnType<T>>\r\ntype ReplaceReturnType<T, TNewReturn> = T extends (a: infer A) => infer R\r\n    ? IsValidArg<A> extends true\r\n        ? (a: A) => TNewReturn\r\n        : () => TNewReturn\r\n    : never\r\ntype RemapActionCreators<T extends ActionCreatorsMapObject> = {\r\n    [K in keyof T]: ReplaceReturnType<T[K], ActionCreatorResponse<T[K]>>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {appActions} from \"../../../app/app-reducer\";\r\nimport {selectError} from \"../../../app/app-selectors\";\r\nimport {useActions} from \"../../hooks\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector(selectError)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport Button from \"@mui/material/Button\";\r\nimport {FilterValuesType, TodolistDomainType, todolistsActions} from \"../../todolists-reducer\";\r\nimport {useActions} from \"../../../../../common/hooks\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\nexport const FilterTasksButtons: FC<PropsType> = memo(({todolist}) => {\r\n\r\n    const {changeTodolistFilter} = useActions(todolistsActions)\r\n\r\n    const changeFilterHandler = (filter: FilterValuesType) => {\r\n        changeTodolistFilter({todolistId: todolist.id, filter})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('all')}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('active')}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('completed')}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC} from \"react\";\r\nimport {EditableSpan} from \"../../../../../../common/components\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses } from \"../../../../../../common/enums\";\r\nimport {TaskType} from \"../../../../tasks/tasks-api\";\r\nimport {useActions} from \"../../../../../../common/hooks\";\r\nimport {tasksThunks} from \"../../../../tasks/tasks-reducer\";\r\nimport s from './styles.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task: FC<PropsType> = React.memo (({task, todolistId}) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksThunks)\r\n\r\n    const removeTaskHandler = () => removeTask({taskId: task.id, todolistId})\r\n\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        updateTask({todolistId, taskId: task.id, domainModel: {status}}\r\n           );\r\n    }\r\n\r\n    const changeTitleHandler = (title: string) => {\r\n        updateTask({todolistId, taskId: task.id, domainModel: {title}});\r\n    }\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? s.isDone : \"\"}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={changeStatusHandler}\r\n            disabled={task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={task.title} changeTitle={changeTitleHandler} disabled={task.entityStatus === 'loading'} />\r\n        <IconButton onClick={removeTaskHandler} disabled={task.entityStatus === 'loading'} >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {FC, memo} from \"react\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses} from \"../../../../../common/enums\";\r\nimport {TaskType} from \"../../../tasks/tasks-api\";\r\nimport {TodolistDomainType} from \"../../todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n}\r\n\r\nexport const Tasks: FC<PropsType> = memo(({tasks, todolist}) => {\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <>{tasksForTodolist.map(t => <Task task={t} todolistId={todolist.id} key={t.id}/>)}</>\r\n    )\r\n})","import React, {FC, memo} from \"react\";\r\nimport {EditableSpan} from \"../../../../../common/components\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useActions} from \"../../../../../common/hooks\";\r\nimport {TodolistDomainType, todolistsThunks} from \"../../todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const TodolistTitle: FC<PropsType> = memo(({todolist}) => {\r\n\r\n    const {removeTodolist, changeTodolistTitle} = useActions(todolistsThunks)\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitleHandler = (title: string) => {\r\n        changeTodolistTitle({todolistId: todolist.id, title})\r\n    }\r\n\r\n    return (\r\n        <h3><EditableSpan title={todolist.title} changeTitle={changeTodolistTitleHandler}\r\n                          disabled={todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n    )\r\n})","import React, {FC, memo, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../../common/components\";\r\nimport {TodolistDomainType} from \"../todolists-reducer\";\r\nimport {tasksThunks} from \"../../tasks/tasks-reducer\";\r\nimport {useActions} from \"../../../../common/hooks\";\r\nimport { TaskType } from '../../tasks/tasks-api';\r\nimport {FilterTasksButtons} from \"./FilterTasksButtons/FilterTasksButtons\";\r\nimport {Tasks} from \"./Tasks/Tasks\";\r\nimport {TodolistTitle} from \"./TodolistTitle/TodolistTitle\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n}\r\n\r\nexport const Todolist: FC<PropsType> = memo(({todolist, tasks}) => {\r\n\r\n    const {fetchTasks, addTask} = useActions(tasksThunks)\r\n\r\n    useEffect(() => {\r\n        fetchTasks(todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = (title: string) => {\r\n        addTask({todolistId: todolist.id, title});\r\n    }\r\n\r\n    return <div>\r\n        <TodolistTitle todolist={todolist}/>\r\n        <AddItemForm addItem={addTaskCallback} disabled={todolist.entityStatus === 'loading'}/>\r\n        <Tasks todolist={todolist} tasks={tasks} />\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <FilterTasksButtons todolist={todolist} />\r\n        </div>\r\n    </div>\r\n})","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn","import {AppStateType} from \"../../../app/store\";\r\n\r\nexport const selectTasks = (state: AppStateType) => state.tasks","import {AppStateType} from \"../../../app/store\";\r\n\r\nexport const selectTodolists = (state: AppStateType) => state.todolists","import React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {todolistsThunks} from \"./todolists/todolists-reducer\";\r\nimport {AddItemForm} from \"../../common/components\";\r\nimport {Todolist} from \"./todolists/Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../auth/auth-selectors\";\r\nimport {selectTasks} from \"./tasks/tasks-selector\";\r\nimport {selectTodolists} from \"./todolists/todolists-selector\";\r\nimport {useActions} from \"../../common/hooks\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const { fetchTodolists, addTodolist} = useActions(todolistsThunks)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolists({})\r\n    }, [])\r\n\r\n    const addTodolistCallback = (title: string) => {\r\n        addTodolist(title);\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {useActions} from \"../../common/hooks\";\r\nimport {LoginParamsType} from \"./auth-api\";\r\nimport {ResponseType} from \"../../common/types\";\r\nimport {authThunks} from \"./auth-reducer\";\r\nimport {selectIsLoggedIn} from \"./auth-selectors\";\r\n\r\nexport const Login = () => {\r\n\r\n    const {login} = useActions(authThunks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values: LoginParamsType, formikHelpers: FormikHelpers<LoginParamsType>) => {\r\n            login(values)\r\n                .unwrap()\r\n                .catch((reason: ResponseType) => {\r\n                    const {fieldsErrors} = reason\r\n                    if (fieldsErrors) {\r\n                        reason.fieldsErrors.forEach((fieldError) => {\r\n                            formikHelpers.setFieldError(fieldError.field, fieldError.error)\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                disabled={!(formik.isValid && formik.dirty)}\r\n                                color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/todolists-list/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../common/components\";\r\nimport {Login} from \"../features/auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {authThunks} from '../features/auth/auth-reducer';\r\nimport {selectIsInitialized, selectStatus} from \"./app-selectors\";\r\nimport {selectIsLoggedIn} from \"../features/auth/auth-selectors\";\r\nimport {useActions} from \"../common/hooks\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {initializeApp, logout} = useActions(authThunks)\r\n\r\n    useEffect(() => {\r\n        initializeApp({})\r\n    }, [])\r\n\r\n    const logoutHandler = () => logout({})\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}