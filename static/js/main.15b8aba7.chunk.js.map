{"version":3,"sources":["serviceWorker.ts","common/enums/common-enums.ts","common/actions/common-actions.ts","common/utils/handle-server-app-error.ts","common/utils/handle-server-network-error.ts","common/utils/create-app-async-thunk.ts","common/api/common-api.ts","features/Auth/auth-api.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolist-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","app/app-selectors.ts","common/hooks/useAppDispatch.ts","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/auth-selectors.ts","features/TodolistsList/tasks-selector.ts","features/TodolistsList/todolists-selector.ts","features/TodolistsList/TodolistsList.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","clearTasksAndTodolists","createAction","handleServerAppError","data","dispatch","messages","length","appActions","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","e","err","axios","isAxiosError","message","createAppAsyncThunk","createAsyncThunk","withTypes","instance","create","baseURL","withCredentials","headers","authAPI","payload","post","delete","get","ResultCode","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","authReducer","reducer","authActions","actions","isInitialized","setIsInitializedAC","appReducer","todolistAPI","title","todolistId","arg","put","taskId","model","fetchTodolists","_","thunkAPI","a","rejectWithValue","res","todolists","removeTodolist","todolistsActions","changeTodolistEntityStatusAC","entityStatus","resultCode","addTodolist","todolist","item","changeTodolistTitle","changeTodolistFilterAC","index","findIndex","tl","id","filter","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todolistsReducer","todolistsThunks","fetchTasks","tasks","items","addTask","task","updateTask","getState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","domainModel","removeTask","tasksActions","changeTaskEntityStatusAC","todoListId","forEach","tasksReducer","tasksThunks","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useDispatch","useSelector","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","trim","TextField","value","onChange","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","selectIsInitialized","selectStatus","selectError","useAppDispatch","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","Delete","Todolist","useEffect","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","selectIsLoggedIn","selectTasks","selectTodolists","TodolistsList","changeStatus","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","catch","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.15b8aba7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const ResultCode = {\r\n    Success: 0,\r\n    Error: 1,\r\n    Captcha: 10,\r\n} as const","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const clearTasksAndTodolists = createAction('common/clear-tasks-todolists')","import {appActions} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ResponseType } from '../types/common-types';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}","import {Dispatch} from \"redux\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (e: unknown, dispatch: Dispatch) => {\r\n    const err = e as Error | AxiosError<{ error: string }>\r\n    if (axios.isAxiosError(err)) {\r\n        const error = err.message ? err.message : 'Some error occurred'\r\n        dispatch(appActions.setAppErrorAC({error}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: `Native error ${err.message}`}))\r\n    }\r\n\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppStateType} from \"../../app/store\";\r\n\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: unknown\r\n}>()","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})","import {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"../../common/types/common-types\";\r\nimport {instance} from \"../../common/api\";\r\n\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {handleServerAppError} from \"../../common/utils\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {authAPI, LoginParamsType} from \"./auth-api\";\r\nimport {ResultCode} from \"../../common/enums\";\r\n\r\n//state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authActions = slice.actions\r\n\r\n// thunks\r\n\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCode.Success) {\r\n                dispatch(authActions.setIsLoggedInAC({isLoggedIn: true}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCode.Success) {\r\n                dispatch(authActions.setIsLoggedInAC({isLoggedIn: false}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(clearTasksAndTodolists())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {AppDispatch, AppThunk} from \"./store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../features/Auth/auth-reducer\";\r\nimport {handleServerAppError} from \"../common/utils\";\r\nimport {handleServerNetworkError} from \"../common/utils\";\r\nimport {ResultCode} from \"../common/enums\";\r\nimport { authAPI } from \"../features/Auth/auth-api\";\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n// state\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState: initialState,\r\n        reducers: {\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const appActions = slice.actions\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    authAPI.me().then((res) => {\r\n        dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(authActions.setIsLoggedInAC({isLoggedIn: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport { instance } from '../../common/api';\r\nimport { ResponseType } from '../../common/types/common-types';\r\nimport {TaskPriorities, TaskStatuses} from \"../../common/enums\";\r\n\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(arg: UpdateTodolistTitleArgType) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${arg.todolistId}`,\r\n            {title: arg.title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(arg: AddTaskArgType) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${arg.todolistId}/tasks`, {title: arg.title})\r\n    },\r\n    deleteTask(arg: RemoveTaskArgType) {\r\n        return instance.delete<ResponseType>(`todo-lists/${arg.todolistId}/tasks/${arg.taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport type AddTaskArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type UpdateTodolistTitleArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type RemoveTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n}","import {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {createAppAsyncThunk} from \"../../common/utils\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {handleServerAppError} from \"../../common/utils\";\r\nimport {todolistAPI, TodolistType, UpdateTodolistTitleArgType} from \"./todolist-api\";\r\nimport { ResultCode } from \"../../common/enums\";\r\n\r\n\r\n//state\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodolistType[] }, void>\r\n('todolists/fetchTodolists', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.getTodolists()\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ todolistId: string }, string>\r\n('todolists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        dispatch(todolistsActions.changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTodolist = createAppAsyncThunk<{ todolist: TodolistType }, string>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitle = createAppAsyncThunk<UpdateTodolistTitleArgType, UpdateTodolistTitleArgType>\r\n('todolists/changeTodolistTitle', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.updateTodolist(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState,\r\n        reducers: {\r\n            changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                    return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n                })\r\n                .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    if (index > -1) {\r\n                        state.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(addTodolist.fulfilled, (state, action) => {\r\n                    state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n                })\r\n                .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    state[index].title = action.payload.title\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return []\r\n                })\r\n        }\r\n    }\r\n)\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsThunks = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsThunks} from \"./todolists-reducer\";\r\nimport {createAppAsyncThunk} from \"../../common/utils\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {handleServerAppError} from \"../../common/utils\";\r\nimport {AddTaskArgType, RemoveTaskArgType, TaskType, todolistAPI, UpdateTaskModelType} from \"./todolist-api\";\r\nimport {ResultCode, TaskPriorities, TaskStatuses} from \"../../common/enums\";\r\n\r\n\r\n// state\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>\r\n('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>\r\n('tasks/addTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.createTask(arg)\r\n        const task = res.data.data.item\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTaskArgType, UpdateTaskArgType>\r\n('tasks/updateTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n    try {\r\n        const tasksForCurrentTodolist = getState().tasks[arg.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === arg.taskId)\r\n        if (!task) {\r\n            dispatch(appActions.setAppErrorAC({error: 'Task not found in the state'}))\r\n            return rejectWithValue(null)\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...arg.domainModel\r\n        }\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTask = createAppAsyncThunk<RemoveTaskArgType, RemoveTaskArgType>\r\n('tasks/removeTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        dispatch(tasksActions.changeTaskEntityStatusAC({todolistId: arg.todolistId, taskId: arg.taskId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTask(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState,\r\n        reducers: {\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                    state[action.payload.todolistId] = action.payload.tasks\r\n                })\r\n                .addCase(addTask.fulfilled, (state, action) => {\r\n                    state[action.payload.task.todoListId].unshift(action.payload.task)\r\n                })\r\n                .addCase(updateTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                    }\r\n                })\r\n                .addCase(removeTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(todolistsThunks.addTodolist.fulfilled, (state, action) => {\r\n                    state[action.payload.todolist.id] = []\r\n                })\r\n                .addCase(todolistsThunks.removeTodolist.fulfilled, (state, action) => {\r\n                    delete state[action.payload.todolistId]\r\n                })\r\n                .addCase(todolistsThunks.fetchTodolists.fulfilled, (state, action) => {\r\n                    action.payload.todolists.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return {}\r\n                })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\nexport const tasksThunks = {fetchTasks, addTask, updateTask, removeTask}\r\n\r\nexport const tasksActions = slice.actions\r\n\r\n//types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype UpdateTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n    domainModel: UpdateDomainTaskModelType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AnyAction, combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// export type AppRootStateType = ReturnType<typeof store.getState>\r\n// export type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch=typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport type AppThunkDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppStateType) => state.app.isInitialized\r\nexport const selectStatus = (state: AppStateType) => state.app.status\r\nexport const selectError = (state: AppStateType) => state.app.error","import { useDispatch } from 'react-redux';\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {appActions} from \"../../../app/app-reducer\";\r\nimport {selectError} from \"../../../app/app-selectors\";\r\nimport {useAppDispatch} from \"../../hooks\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector(selectError)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appActions.setAppErrorAC({error: null}))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../common/components\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses } from \"../../../../common/enums\";\r\nimport {TaskType} from \"../../todolist-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'} >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../common/components\";\r\nimport {EditableSpan} from \"../../../common/components\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {tasksThunks} from \"../tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../common/hooks\";\r\nimport {TaskStatuses} from \"../../../common/enums\";\r\nimport { TaskType } from '../todolist-api';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(tasksThunks.fetchTasks(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'all'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'active'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"),\r\n        [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectTasks = (state: AppStateType) => state.tasks","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectTodolists = (state: AppStateType) => state.todolists","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    FilterValuesType,\r\n    todolistsActions, todolistsThunks\r\n} from \"./todolists-reducer\";\r\nimport {tasksThunks} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../common/components\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../Auth/auth-selectors\";\r\nimport {selectTasks} from \"./tasks-selector\";\r\nimport {selectTodolists} from \"./todolists-selector\";\r\nimport {useAppDispatch} from \"../../common/hooks\";\r\nimport { TaskStatuses } from \"../../common/enums\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(todolistsThunks.fetchTodolists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(tasksThunks.removeTask({taskId, todolistId}));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(tasksThunks.addTask({todolistId, title}));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(tasksThunks.updateTask({todolistId, taskId: id, domainModel: {status}}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(tasksThunks.updateTask({todolistId, taskId: id, domainModel: {title: newTitle}}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        dispatch(todolistsActions.changeTodolistFilterAC({todolistId: todolistId, filter: value}));\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(todolistsThunks.removeTodolist(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(todolistsThunks.changeTodolistTitle({todolistId, title}));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(todolistsThunks.addTodolist(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {selectIsLoggedIn} from \"./auth-selectors\";\r\nimport {useAppDispatch} from \"../../common/hooks\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../common/components\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport { logoutTC } from '../features/Auth/auth-reducer';\r\nimport {selectIsInitialized, selectStatus} from \"./app-selectors\";\r\nimport {selectIsLoggedIn} from \"../features/Auth/auth-selectors\";\r\nimport {useAppDispatch} from \"../common/hooks\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}