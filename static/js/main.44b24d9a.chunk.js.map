{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","slice","createSlice","name","isLoggedIn","reducers","setIsLoggedInAC","state","action","value","authReducer","reducer","actions","status","isInitialized","type","fetchTasksTC","then","res","tasks","items","setTasksAC","catch","updateTaskTC","domainModel","getState","task","find","t","id","apiModel","startDate","priority","description","deadline","resultCode","updateTaskAC","console","warn","rootReducer","combineReducers","todolists","filter","tl","todolist","entityStatus","map","todoListId","copyState","stateCopy","forEach","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useDispatch","useSelector","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","props","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useEffect","todos","changeTaskEntityStatusAC","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","changeTodolistFilterAC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44b24d9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`,\r\n            {title: title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { Dispatch } from 'redux'\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppErrorAC > | ReturnType<typeof setAppStatusAC>>","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {AppDispatch, AppThunk} from \"../../app/store\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type ClearTodolistDataActionType = ReturnType<typeof clearTodolistDataAC>\r\nexport type TodolistsActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ClearTodolistDataActionType\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'TODOLISTS/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'TODOLISTS/ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'TODOLISTS/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'TODOLISTS/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'TODOLISTS/SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'TODOLISTS/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case \"TODOLISTS/CLEAR-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'TODOLISTS/REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'TODOLISTS/ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\r\n    ({type: 'TODOLISTS/CHANGE-TODOLIST-TITLE', title, todolistId} as const)\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) =>\r\n    ({type: 'TODOLISTS/CHANGE-TODOLIST-FILTER', todolistId, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: 'TODOLISTS/SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'TODOLISTS/CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const)\r\nexport const clearTodolistDataAC = () => ({type: 'TODOLISTS/CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(fetchTasksTC(tl.id))\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string): AppThunk =>\r\n    (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodolistDataAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(clearTodolistDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppDispatch, AppThunk} from \"./store\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\n// state\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({ type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    authAPI.me().then((res) => {\r\n        dispatch(setIsInitializedAC(true))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    ClearTodolistDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from \"./todolists-reducer\";\r\nimport {AppDispatch, AppStateType, AppThunk} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ClearTodolistDataActionType\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'TASKS/ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'TASKS/UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)}\r\n        case 'TODOLISTS/ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'TODOLISTS/REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        case 'TODOLISTS/SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"TASKS/SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"TASKS/CHANGE-TASK-ENTITY-STATUS\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)}\r\n        case \"TODOLISTS/CLEAR-DATA\":\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'TASKS/REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'TASKS/ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({type: 'TASKS/UPDATE-TASK', domainModel, todolistId, taskId} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'TASKS/SET-TASKS', todolistId, tasks} as const)\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType ) => ({type: 'TASKS/CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n            todolistAPI.createTask(todolistId, title)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(addTaskAC(res.data.data.item))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch ((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType): AppThunk => (dispatch: AppDispatch, getState: () => AppStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n    dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AnyAction, combineReducers} from \"redux\";\r\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {TodolistsActionsType, todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionsType, appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// export type AppRootStateType = ReturnType<typeof store.getState>\r\n// export type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch=typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport type AppThunkDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'all'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'active'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"),\r\n        [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport { logoutTC } from '../features/Auth/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}