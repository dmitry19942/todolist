{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","features/TodolistsList/tasks-reducer.ts","api/todolist-api.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","taskAPI","todolistId","get","taskTitle","post","title","taskId","delete","model","put","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","status","then","res","action","type","updateTaskAC","console","warn","todolistAPI","rootReducer","combineReducers","todolists","state","filter","tl","todolist","map","todoListId","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","log","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","useDispatch","useEffect","data","items","setTasksAC","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistFilterAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICdMC,EAMAC,E,kEANAD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAiCZ,IAAMC,EAAWC,IAAMC,OAAO,CAC1BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAU,SACXC,GACJ,OAAOP,EAASQ,IAAT,qBAAiDD,EAAjD,YAFFD,EAAU,SAIRC,EAAoBE,GAC3B,OAAOT,EAASU,KAAT,qBAA4DH,EAA5D,UACH,CAAEI,MAAOF,KANRH,EAAU,SAQRC,EAAoBK,GAC3B,OAAOZ,EAASa,OAAT,qBAAgDN,EAAhD,kBAAoEK,KATtEN,EAAU,SAWRC,EAAoBK,EAAgBE,GAC3C,OAAOd,EAASe,IAAT,qBACWR,EADX,kBAC+BK,GAAUE,ICtClDE,EAA+B,GA6DxBC,EAAe,SAACL,EAAgBL,EAAoBW,GAArC,OAAgF,SAACC,EAAiCC,GACtI,IAEMC,EAFoBD,IAAWE,MACaf,GACbgB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOb,KACxD,GAAKS,EAAL,CAIA,IAAMK,EAA6B,aAC/Bf,MAAOU,EAAKV,MACZgB,UAAWN,EAAKM,UAChBC,SAAUP,EAAKO,SACfC,YAAaR,EAAKQ,YAClBC,SAAUT,EAAKS,SACfC,OAAQV,EAAKU,QACVb,GAEPZ,EAAmBC,EAAYK,EAAQc,GAClCM,MAAK,SAAAC,GACF,IAAMC,EA7CM,SAACtB,EAAgBM,EAAwCX,GAAzD,MAAiF,CAAC4B,KAAM,cAAejB,cAAaX,aAAYK,UA6C7HwB,CAAaxB,EAAQM,EAAaX,GACjDY,EAASe,WAfbG,QAAQC,KAAK,iCC5EnBtC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNkC,EAAc,WAEnB,OAAOvC,EAASQ,IAAyB,eAFpC+B,EAAc,SAIR5B,GACX,OAAOX,EAASU,KAAyC,aACrD,CAAEC,MAAOA,KANR4B,EAAc,SAQRhC,GACX,OAAOP,EAASa,OAAT,qBAAgDN,KATlDgC,EAAc,SAWRhC,EAAoBI,GAC/B,OAAOX,EAASe,IAAT,qBAA6CR,GAChD,CAAEI,MAAOA,KCpBfK,EAA0C,G,QCb1CwB,EAAcC,YAAgB,CAChCC,UDc4B,WAAsG,IAArGC,EAAoG,uDAAjE3B,EAAckB,EAAmD,uCACjI,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOQ,EAAMC,QAAO,SAAAC,GAAE,OAAIA,EAAGpB,KAAOS,EAAO3B,cAC/C,IAAK,eACD,MAAM,CAAN,2BAAY2B,EAAOY,UAAnB,IAA6BF,OAAQ,SAArC,mBAAgDD,IACpD,IAAK,wBACD,OAAOA,EAAMI,KAAI,SAAAF,GAAE,OAAIA,EAAGpB,KAAOS,EAAO3B,WAAjB,2BAAkCsC,GAAlC,IAAsClC,MAAOuB,EAAOvB,QAASkC,KACxF,IAAK,yBACD,OAAOF,EAAMI,KAAI,SAAAF,GAAE,OAAIA,EAAGpB,KAAOS,EAAO3B,WAAjB,2BAAkCsC,GAAlC,IAAsCD,OAAQV,EAAOU,SAAUC,KAC1F,IAAK,gBACD,OAAOX,EAAOQ,UAAUK,KAAI,SAAAF,GAAE,kCAASA,GAAT,IAAaD,OAAQ,WACvD,QACI,OAAOD,IC1BfrB,MHqBwB,WAAgF,IAA/EqB,EAA8E,uDAAtD3B,EAAckB,EAAwC,uCACvG,OAAQA,EAAOC,MACX,IAAK,cACD,OAAO,2BAAIQ,GAAX,kBAAmBT,EAAO3B,WAAaoC,EAAMT,EAAO3B,YAAYqC,QAAO,SAAApB,GAAC,OAAIA,EAAEC,KAAOS,EAAOtB,YAChG,IAAK,WACD,OAAO,2BAAI+B,GAAX,kBAAmBT,EAAOb,KAAK2B,WAA/B,CAA6Cd,EAAOb,MAApD,mBAA6DsB,EAAMT,EAAOb,KAAK2B,gBACnF,IAAK,cACD,OAAO,2BAAIL,GAAX,kBAAmBT,EAAO3B,WAAaoC,EAAMT,EAAO3B,YAAYwC,KAAI,SAAAvB,GAAC,OAAIA,EAAEC,KAAOS,EAAOtB,OAAhB,2BAA6BY,GAAMU,EAAOhB,aAAeM,OACtI,IAAK,eACD,OAAO,2BAAImB,GAAX,kBAAmBT,EAAOY,SAASrB,GAAK,KAC5C,IAAK,kBACD,IAAMwB,EAAS,eAAON,GAEtB,cADOM,EAAUf,EAAO3B,YACjB0C,EACX,IAAK,gBACD,IAAMC,EAAS,eAAOP,GAItB,OAHAT,EAAOQ,UAAUS,SAAQ,SAACN,GACtBK,EAAUL,EAAGpB,IAAM,MAEhByB,EAEX,IAAK,YACD,OAAO,2BAAIP,GAAX,kBAAmBT,EAAO3B,WAAa2B,EAAOZ,QAClD,QACI,OAAOqB,MGxCNS,EAAQC,YAAYb,EAAac,YAAgBC,MAI9D7D,OAAO0D,MAAQA,E,sHCTFI,EAAcC,IAAMC,MAAK,SAACC,GACnCtB,QAAQuB,IAAI,yBACZ,MAAsCC,mBAAiB,IAAvD,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,oBAAkB,GAA1C,mBAAKG,EAAL,KAAYC,EAAZ,KAOMC,EAAU,WACgB,KAAxBJ,EAAaK,OACbR,EAAMS,QAAQN,EAAaK,QAE3BF,GAAS,GAEbF,EAAgB,KASpB,OACI,6BACI,kBAACM,EAAA,EAAD,CACIC,MAAOR,EACPS,SAxBY,SAACC,GACrBP,GAAS,GACTF,EAAgBS,EAAEC,cAAcH,QAuBxBI,WAXc,SAACF,GACT,UAAVA,EAAEG,KACFT,KAUIU,KAAM,QACNZ,MAAOA,EACPa,WAAYb,GAAS,qBACrBc,MAAO,QACPC,QAAS,aAEb,kBAACC,EAAA,EAAD,CACIC,QAASf,EACTgB,MAAO,WAEP,kBAACC,EAAA,EAAD,WCzCHC,EAAe3B,IAAMC,MAAK,SAACC,GACpC,MAA8BE,oBAAkB,GAAhD,mBAAKwB,EAAL,KAAeC,EAAf,KACA,EAAwBzB,mBAAiBF,EAAMhD,OAA/C,mBAAKA,EAAL,KAAY4E,EAAZ,KAMMC,EAAc,WAChBF,GAAY,GACZ3B,EAAM8B,YAAY9E,IAStB,OACI0E,EACM,kBAAChB,EAAA,EAAD,CACEE,SAlBQ,SAACC,GACjBe,EAASf,EAAEC,cAAcH,QAkBjBA,MAAO3D,EACP+E,OAAQF,EACRG,WAAS,EACTjB,WAbkB,SAACF,GACb,UAAVA,EAAEG,KACFa,OAaE,0BAAMI,cArBG,kBAAMN,GAAY,KAqBO3B,EAAMhD,U,kBCvBzCkF,EAAOpC,IAAMC,MAAM,SAACC,GAC7B,IAKMmC,EAAuBC,uBAAa,SAACC,GACvCrC,EAAMsC,gBAAgBtC,EAAMtC,KAAKI,GAAIuE,EAAUrC,EAAMpD,cACtD,CAACoD,EAAMtC,KAAKI,GAAIkC,EAAMsC,gBAAiBtC,EAAMpD,aAEhD,OAAO,yBAAKoE,IAAKhB,EAAMtC,KAAKI,GAAIyE,UAAWvC,EAAMtC,KAAKU,SAAWjC,EAAaqG,UAAY,UAAY,IAClG,kBAACC,EAAA,EAAD,CACIC,QAAS1C,EAAMtC,KAAKU,SAAWjC,EAAaqG,UAC5CjB,MAAM,UACNX,SAZgB,SAACC,GACrB,IAAI8B,EAAiB9B,EAAEC,cAAc4B,QACrC1C,EAAM4C,iBAAiB5C,EAAMtC,KAAKI,GAAI6E,EAAiBxG,EAAaqG,UAAYrG,EAAa0G,IAAK7C,EAAMpD,eAaxG,kBAAC6E,EAAD,CAAczE,MAAOgD,EAAMtC,KAAKV,MAAO8E,YAAaK,IACpD,kBAACd,EAAA,EAAD,CAAYC,QAjBO,kBAAMtB,EAAM8C,WAAW9C,EAAMtC,KAAKI,GAAIkC,EAAMpD,cAkB3D,kBAACmG,EAAA,EAAD,WCPCC,EAAWlD,IAAMC,MAAK,SAACC,GAChC,IAAMxC,EAAWyF,cAEjBC,qBAAU,WPuCc,IAACtG,EOtCrBY,GPsCqBZ,EOtCCoD,EAAMlC,GPsCgB,SAACN,GACjDb,EAAgBC,GACXyB,MAAK,SAACC,GACH,IAAMX,EAAQW,EAAI6E,KAAKC,MACvB5F,EARc,SAACZ,EAAoBe,GAArB,MACrB,CAACa,KAAM,YAAa5B,aAAYe,SAOhB0F,CAAWzG,EAAYe,YOzCrC,IAEH,IAAM4C,EAAU6B,uBAAY,SAACpF,GACzBgD,EAAMO,QAAQvD,EAAOgD,EAAMlC,MAC5B,CAACkC,EAAMO,QAASP,EAAMlC,KAKnBwF,EAAsBlB,uBAAa,SAACpF,GACtCgD,EAAMsD,oBAAoBtD,EAAMlC,GAAId,KACrC,CAACgD,EAAMsD,oBAAqBtD,EAAMlC,KAG/ByF,EAAoBnB,uBAAa,kBAAMpC,EAAMwD,aAAaxD,EAAMlC,GAAI,SAAQ,CAACkC,EAAMlC,GAAIkC,EAAMwD,eAC7FC,EAAuBrB,uBAAa,kBAAMpC,EAAMwD,aAAaxD,EAAMlC,GAAI,YAAW,CAACkC,EAAMlC,GAAIkC,EAAMwD,eACnGE,EAA0BtB,uBAAa,kBAAMpC,EAAMwD,aAAaxD,EAAMlC,GAAI,eAAc,CAACkC,EAAMlC,GAAIkC,EAAMwD,eAE3GG,EAAmB3D,EAAMrC,MAQ7B,MAPqB,WAAjBqC,EAAMf,SACN0E,EAAmB3D,EAAMrC,MAAMsB,QAAO,SAAApB,GAAC,OAAIA,EAAEO,SAAWjC,EAAa0G,QAEpD,cAAjB7C,EAAMf,SACN0E,EAAmB3D,EAAMrC,MAAMsB,QAAO,SAAApB,GAAC,OAAIA,EAAEO,SAAWjC,EAAaqG,cAGlE,6BACH,gCAAK,kBAACf,EAAD,CAAczE,MAAOgD,EAAMhD,MAAO8E,YAAawB,IAChD,kBAACjC,EAAA,EAAD,CAAYC,QAtBG,WACnBtB,EAAM4D,eAAe5D,EAAMlC,MAsBnB,kBAACiF,EAAA,EAAD,QAGR,kBAAClD,EAAD,CAAaY,QAASF,IACtB,6BAEQoD,EAAiBvE,KAAI,SAAAvB,GAAC,OAAI,kBAACqE,EAAD,CACtBxE,KAAMG,EACNyE,gBAAiBtC,EAAMsC,gBACvBM,iBAAkB5C,EAAM4C,iBACxBE,WAAY9C,EAAM8C,WAClBlG,WAAYoD,EAAMlC,GAClBkD,IAAKnD,EAAEC,SAInB,yBAAK+F,MAAO,CAAEC,WAAY,SACtB,kBAACC,EAAA,EAAD,CAAQ3C,QAA0B,QAAjBpB,EAAMf,OAAmB,WAAa,OAC/CqC,QAASiC,EACThC,MAAO,WAFf,OAKA,kBAACwC,EAAA,EAAD,CAAQ3C,QAA0B,WAAjBpB,EAAMf,OAAsB,WAAa,OAClDqC,QAASmC,EACTlC,MAAO,WAFf,UAIA,kBAACwC,EAAA,EAAD,CAAQ3C,QAA0B,cAAjBpB,EAAMf,OAAyB,WAAa,OACrDqC,QAASoC,EACTnC,MAAO,aAFf,kBCpECyC,EAA0B,WAEnC,IAAMjF,EAAYkF,aAA0D,SAAAjF,GAAK,OAAIA,EAAMD,aACrFpB,EAAQsG,aAA+C,SAAAjF,GAAK,OAAIA,EAAMrB,SAEtEH,EAAWyF,cAEjBC,qBAAU,WACN1F,GN0B8B,SAACA,GACnCoB,IACKP,MAAK,SAACC,GACPd,EANH,CAAEgB,KAAM,gBAAiBO,UAMET,EAAI6E,eM5B7B,IAEH,IAAML,EAAaV,uBAAY,SAACtE,EAAYlB,GACxCY,ER6CoB,SAACZ,EAAoBK,GAArB,OAAwC,SAACO,GACjEb,EAAmBC,EAAYK,GAC1BoB,MAAK,SAACC,GACH,IAAMC,EAnBU,SAACtB,EAAgBL,GAAjB,MACvB,CAAC4B,KAAM,cAAevB,SAAQL,cAkBRsH,CAAajH,EAAQL,GACpCY,EAASe,OQjDJ4F,CAAavH,EAAYkB,MACnC,CAACN,IAEE+C,EAAU6B,uBAAY,SAACpF,EAAeJ,GACxCY,ERgDiB,SAACZ,EAAoBI,GAArB,OAAuC,SAACQ,GAC7Db,EAAmBC,EAAYI,GAC1BqB,MAAK,SAACC,GACH,IAAMC,EAvBb,CAACC,KAAM,WAAYd,KAuBaY,EAAI6E,KAAKA,KAAKiB,MACvC5G,EAASe,OQpDJ8F,CAAUzH,EAAYI,MAChC,CAACQ,IAEE8G,EAAelC,uBAAY,SAACtE,EAAYM,EAAsBxB,GAChEY,EAASF,EAAaQ,EAAIlB,EAAY,CAACwB,cACxC,CAACZ,IAEE8E,EAAkBF,uBAAY,SAACtE,EAAYyG,EAAkB3H,GAC/DY,EAASF,EAAaQ,EAAIlB,EAAY,CAACI,MAAOuH,OAC/C,CAAC/G,IAEEgG,EAAepB,uBAAY,SAACxF,EAAoB+D,GAClD,IAAMpC,ENAwB,SAAC3B,EAAoBqC,GAArB,MACjC,CAAET,KAAM,yBAA0B5B,aAAYqC,UMD5BuF,CAAuB5H,EAAY+D,GAClDnD,EAASe,KACV,CAACf,IAEEoG,EAAiBxB,uBAAY,SAACxF,GAChCY,ENOwB,SAACZ,GAAD,OAAwB,SAACY,GACrDoB,EAA2BhC,GACtByB,MAAK,SAACC,GACHd,EArBoB,SAACZ,GAAD,MAC3B,CAAE4B,KAAM,kBAAmB5B,cAoBX6H,CAAiB7H,QMVrB8H,CAAiB9H,MAC3B,CAACY,IAEE8F,EAAsBlB,uBAAY,SAACxF,EAAoBI,GACzDQ,ENe6B,SAACZ,EAAoBI,GAArB,OAAuC,SAACQ,GACzEoB,EAA2BhC,EAAWI,GACjCqB,MAAK,SAACC,GACHd,EA7ByB,SAACZ,EAAoBI,GAArB,MAChC,CAAEwB,KAAM,wBAAyBxB,QAAOJ,cA4BxB+H,CAAsB/H,EAAYI,QMlBtC4H,CAAsBhI,EAAYI,MAC5C,CAACQ,IAEEqH,EAAczC,uBAAY,SAACpF,GAC7BQ,ENKqB,SAACR,GAAD,OAAmB,SAACQ,GAC7CoB,EAA2B5B,GACtBqB,MAAK,SAACC,GACHd,EAxBP,CAAEgB,KAAM,eAAgBW,SAwBMb,EAAI6E,KAAKA,KAAKiB,WMRhCU,CAAc9H,MACxB,CAACQ,IAGJ,OAAO,oCACH,kBAACuH,EAAA,EAAD,CAAMC,WAAS,EAACnB,MAAO,CAACoB,QAAS,SAC7B,kBAACpF,EAAD,CAAaY,QAASoE,KAE1B,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBnG,EAAUK,KAAI,SAAAF,GACV,IAAIiG,EAAmBxH,EAAMuB,EAAGpB,IAEhC,OAAO,kBAACiH,EAAA,EAAD,CAAMX,MAAI,EAACpD,IAAK9B,EAAGpB,IACtB,kBAACsH,EAAA,EAAD,CAAOvB,MAAO,CAACoB,QAAS,SACpB,kBAACjC,EAAD,CACIlF,GAAIoB,EAAGpB,GACPd,MAAOkC,EAAGlC,MACVW,MAAOwH,EACPrC,WAAYA,EACZU,aAAcA,EACdjD,QAASA,EACTqC,iBAAkB0B,EAClBrF,OAAQC,EAAGD,OACX2E,eAAgBA,EAChBtB,gBAAiBA,EACjBgB,oBAAqBA,YCvDtC+B,MAtBf,WAEI,OACI,yBAAK9C,UAAU,OACX,kBAAC+C,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACnE,EAAA,EAAD,CAAYoE,KAAK,QAAQlE,MAAM,UAAUmE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYxE,QAAQ,MAApB,QAGA,kBAAC2C,EAAA,EAAD,CAAQxC,MAAM,WAAd,WAGR,kBAACsE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,SCfhBC,IAASC,OACL,kBAAC,IAAD,CAAUvG,MAAOA,GACjB,kBAAC,EAAD,OAEGwG,SAASC,eAAe,SZ+HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhI,MAAK,SAAAiI,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACL3B,QAAQ2B,MAAMA,EAAMoG,a","file":"static/js/main.31997fef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {ResponseType} from \"./todolist-api\";\r\n\r\n// types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n // instance\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const taskAPI = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`,\r\n            { title: taskTitle })\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        return instance.put<UpdateTaskModelType, ResponseType<{item: TaskType}>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/task-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', domainModel, todolistId, taskId} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'SET-TASKS', todolistId, tasks} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    taskAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    taskAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            const action = addTaskAC(res.data.data.item)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        taskAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios'\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',\r\n            { title: title })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`,\r\n            { title: title })\r\n    },\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\ntype ActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({ type: 'REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({ type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\r\n    ({ type: 'CHANGE-TODOLIST-TITLE', title, todolistId} as const)\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) =>\r\n    ({ type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({ type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n    })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.updateTodolist(todolistId,title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n        })\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/task-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/task-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(props.id, 'all'), [props.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(props.id, 'active'), [props.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(props.id, \"completed\"), [props.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/task-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks )\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList />\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}