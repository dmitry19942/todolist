{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axios","create","baseURL","withCredentials","headers","initialState","count","rootReducer","combineReducers","todolists","state","action","type","filter","tl","id","todolistId","title","addedDate","order","todolist","find","tasks","stateCopy","newTasks","t","taskId","newTask","v1","status","New","todoListId","description","startDate","deadline","priority","Low","todolistTasks","map","copyState","store","createStore","AddItemForm","React","memo","props","console","log","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","changeTodolistTitle","tasksForTodolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","style","paddingTop","Button","AppWithRedux","useSelector","dispatch","useDispatch","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c871665.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {ResponseType} from \"./todolist-api\";\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string | null\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n\r\nexport const taskAPI = {\r\n    getTask(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        const promise = instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`,\r\n            { title: taskTitle })\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        const promise = instance.put<ResponseType<{item: TaskType}>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model\r\n        )\r\n        return promise\r\n    },\r\n}","import {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/task-api\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    todolistId: string\r\n    status: TaskStatuses\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    count: []\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId, description: '', startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, status: action.status}\r\n                    : t)\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todolistId }\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, status, todolistId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todolistId }\r\n}\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {TodolistType} from \"../api/todolist-api\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    todolistId: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\", addedDate: '', order: 0}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.todolistId);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.todolistId);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', todolistId: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, todolistId: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, todolistId: todolistId}\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist is called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(\"completed\", props.id), [props.id, props.changeFilter]);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, { useCallback } from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, FilterValuesType,\r\n    removeTodolistAC, TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    console.log('App is called')\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks )\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const action = removeTodolistAC(todolistId)\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        const action = changeTodolistTitleAC(todolistId, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}