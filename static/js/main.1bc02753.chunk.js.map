{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","appActions","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","clearTodolistDataAC","todolistsReducer","reducer","todolistsActions","actions","isLoggedIn","setIsLoggedInAC","value","authReducer","authActions","isInitialized","setIsInitializedAC","appReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","domainModel","setTasksAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","tasksActions","fetchTasksTC","then","res","items","catch","updateTaskTC","getState","find","apiModel","startDate","priority","description","deadline","resultCode","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useDispatch","useSelector","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","props","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useEffect","todos","removeTaskTC","item","addTaskTC","changeStatus","removeTodolistTC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICFMC,EAMAC,E,qDANAD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,kBAAAA,M,KA6CZ,IAAMC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIRE,GACX,OAAOR,EAASS,KAA6E,aACzF,CAACD,MAAOA,KANPF,EAAc,SAQRI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAT9CJ,EAAc,SAWRI,EAAoBF,GAC/B,OAAOR,EAASY,IAAT,qBAA2EF,GAC9E,CAACF,MAAOA,KAbPF,EAAc,SAefI,GACJ,OAAOV,EAASO,IAAT,qBAAiDG,EAAjD,YAhBFJ,EAAc,SAkBZI,EAAoBG,GAC3B,OAAOb,EAASS,KAAT,qBACWC,EADX,UAC+B,CAACF,MAAOK,KApBzCP,EAAc,SAsBZI,EAAoBI,GAC3B,OAAOd,EAASW,OAAT,qBAA4CD,EAA5C,kBAAgEI,KAvBlER,EAAc,SAyBZI,EAAoBI,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBACWF,EADX,kBAC+BI,GAAUC,IAI3CC,EAAU,SACbC,GACF,OAAOjB,EAASS,KACZ,aAAcQ,IAHbD,EAAU,WAMf,OAAOhB,EAASW,OAAqB,eANhCK,EAAU,WASf,OAAOhB,EAASO,IAAiC,YC/G5CW,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASG,EAAWC,cAAc,CAACC,MAAON,EAAKE,SAAS,MAExDD,EAASG,EAAWC,cAAc,CAACC,MAAO,yBAE9CL,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAGnCC,EAA2B,SAACH,EAA0BL,GAC/DA,EAASG,EAAWC,cAAc,CAACC,MAAOA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC1ET,EAASG,EAAWG,eAAe,CAACC,OAAQ,a,QCC1CG,EAAQC,YAAY,CAClBC,KAAM,YACNC,aAJwC,GAKxCC,SAAU,CACNC,iBADM,SACWC,EAAOC,GACpB,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOpB,QAAQP,cACzD4B,GAAS,GACTF,EAAMM,OAAOJ,EAAO,IAG5BK,cAPM,SAOQP,EAAOC,GACjBD,EAAMQ,QAAN,2BAAkBP,EAAOpB,QAAQ4B,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE5EC,sBAVM,SAUgBZ,EAAOC,GACzB,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOpB,QAAQP,cAC7D0B,EAAME,GAAO9B,MAAQ6B,EAAOpB,QAAQT,OAExCyC,uBAdM,SAciBb,EAAOC,GAC1B,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOpB,QAAQP,cAC7D0B,EAAME,GAAOQ,OAAST,EAAOpB,QAAQ6B,QAEzCI,eAlBM,SAkBSd,EAAOC,GAClB,OAAOA,EAAOpB,QAAQkC,UAAUC,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaM,OAAQ,MAAOC,aAAc,aAEpFM,6BArBM,SAqBuBjB,EAAOC,GAChC,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOpB,QAAQP,cAC7D0B,EAAME,GAAOS,aAAeV,EAAOpB,QAAQ8B,cAE/CO,oBAzBM,WA0BF,MAAO,OAKVC,EAAmBzB,EAAM0B,QAEzBC,EAAmB3B,EAAM4B,QCzChC5B,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjB0B,YAAY,GAMZzB,SAAU,CACN0B,gBADM,SACUxB,EAAOC,GACnBD,EAAMuB,WAAatB,EAAOpB,QAAQ4C,UAKjCC,EAAchC,EAAM0B,QACpBO,EAAcjC,EAAM4B,QCF3B5B,EAAQC,YAAY,CAClBC,KAAM,MACNC,aAR+B,CACnCN,OAAQ,OACRF,MAAO,KACPuC,eAAe,GAMX9B,SAAU,CACNR,eADM,SACSU,EAAOC,GAClBD,EAAMT,OAASU,EAAOpB,QAAQU,QAElCH,cAJM,SAIQY,EAAOC,GACjBD,EAAMX,MAAQY,EAAOpB,QAAQQ,OAEjCwC,mBAPM,SAOa7B,EAAOC,GACtBD,EAAM4B,cAAgB3B,EAAOpB,QAAQ+C,kBAMxCE,EAAapC,EAAM0B,QAEnBjC,EAAaO,EAAM4B,QCX1B5B,EAAQC,YAAY,CAClBC,KAAM,QACNC,aAJ6B,GAK7BC,SAAU,CACNiC,aADM,SACO/B,EAAOC,GAChB,IAAM+B,EAAQhC,EAAMC,EAAOpB,QAAQP,YAC7B4B,EAAQ8B,EAAM7B,WAAU,SAAA8B,GAAC,OAAIA,EAAE5B,KAAOJ,EAAOpB,QAAQH,UACvDwB,GAAS,GACT8B,EAAM1B,OAAOJ,EAAO,IAG5BgC,UARM,SAQIlC,EAAOC,GACbD,EAAMC,EAAOpB,QAAQsD,KAAKC,YAAY5B,QAAQP,EAAOpB,QAAQsD,OAEjEE,aAXM,SAWOrC,EAAOC,GAChB,IAAM+B,EAAQhC,EAAMC,EAAOpB,QAAQP,YAC7B4B,EAAQ8B,EAAM7B,WAAU,SAAA8B,GAAC,OAAIA,EAAE5B,KAAOJ,EAAOpB,QAAQH,UACvDwB,GAAS,IACT8B,EAAM9B,GAAN,2BAAmB8B,EAAM9B,IAAWD,EAAOpB,QAAQyD,eAG3DC,WAlBM,SAkBKvC,EAAOC,GACdD,EAAMC,EAAOpB,QAAQP,YAAc2B,EAAOpB,QAAQmD,OAEtDQ,yBArBM,SAqBmBxC,EAAOC,GAC5B,IAAM+B,EAAQhC,EAAMC,EAAOpB,QAAQP,YAC7B4B,EAAQ8B,EAAM7B,WAAU,SAAA8B,GAAC,OAAIA,EAAE5B,KAAOJ,EAAOpB,QAAQH,UACvDwB,GAAS,IACT8B,EAAM9B,GAAN,2BAAmB8B,EAAM9B,IAAzB,IAAiCS,aAAcV,EAAOpB,QAAQ8B,kBAI1E8B,cAAe,SAACC,GACZA,EAAQC,QAAQtB,EAAiBd,eAAe,SAACP,EAAOC,GACpDD,EAAMC,EAAOpB,QAAQ4B,SAASJ,IAAM,MAExCqC,EAAQC,QAAQtB,EAAiBtB,kBAAkB,SAACC,EAAOC,UAChDD,EAAMC,EAAOpB,QAAQP,eAEhCoE,EAAQC,QAAQtB,EAAiBP,gBAAgB,SAACd,EAAOC,GACrDA,EAAOpB,QAAQkC,UAAU6B,SAAQ,SAACxC,GAC9BJ,EAAMI,EAAGC,IAAM,SAGvBqC,EAAQC,QAAQtB,EAAiBH,qBAAqB,WAClD,MAAO,SAMV2B,EAAcnD,EAAM0B,QAEpB0B,EAAepD,EAAM4B,QAGrByB,EAAe,SAACzE,GAAD,OAAkC,SAACU,GAC3DA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAAoBI,GACf0E,MAAK,SAACC,GACH,IAAMjB,EAAQiB,EAAIlE,KAAKmE,MACvBlE,EAAS8D,EAAaP,WAAW,CAACjE,aAAY0D,WAC9ChD,EAASG,EAAWG,eAAe,CAACC,OAAQ,kBAE/C4D,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,QAkC/BoE,EAAe,SAAC1E,EAAgBJ,EAAoBgE,GAArC,OAA0F,SAACtD,EAAuBqE,GACtI,IAEMlB,EAFoBkB,IAAWrB,MACa1D,GACbgF,MAAK,SAAArB,GAAC,OAAIA,EAAE5B,KAAO3B,KACxD,GAAKyD,EAAL,CAIA,IAAMoB,EAA6B,aAC/BnF,MAAO+D,EAAK/D,MACZoF,UAAWrB,EAAKqB,UAChBC,SAAUtB,EAAKsB,SACfC,YAAavB,EAAKuB,YAClBC,SAAUxB,EAAKwB,SACfpE,OAAQ4C,EAAK5C,QACV+C,GAEXtD,EAASG,EAAWG,eAAe,CAACC,OAAQ,aACxCrB,EAAuBI,EAAYI,EAAQ6E,GACtCP,MAAK,SAAAC,GAC0B,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAAS8D,EAAaT,aAAa,CAAC3D,SAAQ4D,cAAahE,gBACzDU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,WAvBpC6E,QAAQC,KAAK,iC,SC3HnBC,EAAcC,YAAgB,CAChCjD,UAAWI,EACXa,MAAOa,EACPoB,IAAKnC,EACLoC,KAAMxC,IAGGyC,EAAQC,YAAe,CAChChD,QAAS2C,EACTM,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,QAAQC,QAUxBC,IAGiBC,IAGlEpH,OAAO6G,MAAQA,E,8CCzBFQ,EAAcC,IAAMC,MAAK,YAAwD,IAAtDC,EAAqD,EAArDA,QAAqD,IAA5CC,gBAA4C,SACzF,EAAsCC,mBAAiB,IAAvD,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,oBAAkB,GAA1C,mBAAK3F,EAAL,KAAY8F,EAAZ,KAOMC,EAAU,WACgB,KAAxBH,EAAaI,OACbP,EAAQG,EAAaI,QAErBF,GAAS,GAEbD,EAAgB,KASpB,OACI,6BACI,kBAACI,EAAA,EAAD,CACI7D,MAAOwD,EACPM,SAxBY,SAACC,GACrBL,GAAS,GACTD,EAAgBM,EAAEC,cAAchE,QAuBxBiE,WAXc,SAACF,GACT,UAAVA,EAAEG,KACFP,KAUIL,SAAUA,EACVa,KAAM,QACNvG,MAAOA,EACPwG,WAAYxG,GAAS,qBACrByG,MAAO,QACPC,QAAS,aAEb,kBAACC,EAAA,EAAD,CACIC,QAASb,EACTc,MAAO,UACPnB,SAAUA,GAEV,kBAACoB,EAAA,EAAD,WC3CHC,EAAexB,IAAMC,MAAK,YAAoE,IAAlEzG,EAAiE,EAAjEA,MAAOiI,EAA0D,EAA1DA,YAA0D,IAA7CtB,gBAA6C,SACtG,EAA8BC,oBAAkB,GAAhD,mBAAKsB,EAAL,KAAeC,EAAf,KACA,EAA8BvB,mBAAiB5G,GAA/C,mBAAKoI,EAAL,KAAeC,EAAf,KAWMC,EAAc,WAChBH,GAAY,GACZF,EAAYG,IAShB,OACIF,EACM,kBAAChB,EAAA,EAAD,CACEC,SAvBe,SAACC,GACxBiB,EAAYjB,EAAEC,cAAchE,QAuBpBA,MAAO+E,EACPG,OAAQD,EACRE,WAAS,EACTlB,WAbkB,SAACF,GACb,UAAVA,EAAEG,KACFe,OAaE,0BAAMG,cA1BG,WACX9B,GAGJwB,GAAY,KAsB4BnI,M,kBC3BnC0I,GAAOlC,IAAMC,MAAM,SAACkC,GAC7B,IAMMC,EAAuBC,uBAAa,SAACC,GACvCH,EAAMI,gBAAgBJ,EAAM5E,KAAK9B,GAAI6G,EAAUH,EAAMzI,cACtD,CAACyI,EAAM5E,KAAK9B,GAAI0G,EAAMI,gBAAiBJ,EAAMzI,aAEhD,OAAO,yBAAKqH,IAAKoB,EAAM5E,KAAK9B,GAAI+G,UAAWL,EAAM5E,KAAK5C,SAAW7B,EAAa2J,UAAY,UAAY,IAClG,kBAACC,EAAA,EAAD,CACIC,QAASR,EAAM5E,KAAK5C,SAAW7B,EAAa2J,UAC5CnB,MAAM,UACNX,SAbgB,SAACC,GACrB,IAAIgC,EAAiBhC,EAAEC,cAAc8B,QACrCR,EAAMU,iBAAiBV,EAAM5E,KAAK9B,GAAImH,EAAiB9J,EAAa2J,UAAY3J,EAAagK,IACzFX,EAAMzI,aAWNyG,SAAsC,YAA5BgC,EAAM5E,KAAKxB,eAEzB,kBAACyF,EAAD,CAAchI,MAAO2I,EAAM5E,KAAK/D,MAAOiI,YAAaW,EAAsBjC,SAAsC,YAA5BgC,EAAM5E,KAAKxB,eAC/F,kBAACqF,EAAA,EAAD,CAAYC,QAlBO,kBAAMc,EAAMY,WAAWZ,EAAM5E,KAAK9B,GAAI0G,EAAMzI,aAkB1ByG,SAAsC,YAA5BgC,EAAM5E,KAAKxB,cACtD,kBAACiH,EAAA,EAAD,W,UCbCC,GAAWjD,IAAMC,MAAK,SAAUkC,GAEzC,IAAM3B,EAAU6B,uBAAY,SAAC7I,GACzB2I,EAAM3B,QAAQhH,EAAO2I,EAAMtG,SAASJ,MACrC,CAAC0G,EAAM3B,QAAS2B,EAAMtG,SAASJ,KAM5ByH,EAAsBb,uBAAY,SAAC7I,GACrC2I,EAAMe,oBAAoBf,EAAMtG,SAASJ,GAAIjC,KAC9C,CAAC2I,EAAMe,oBAAqBf,EAAMtG,SAASJ,KAExC0H,EAAoBd,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAMtG,SAASJ,GAAI,SAC9E,CAAC0G,EAAMtG,SAASJ,GAAI0G,EAAMiB,eACxBC,EAAuBhB,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAMtG,SAASJ,GAAI,YACjF,CAAC0G,EAAMtG,SAASJ,GAAI0G,EAAMiB,eACxBE,EAA0BjB,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAMtG,SAASJ,GAAI,eACpF,CAAC0G,EAAMtG,SAASJ,GAAI0G,EAAMiB,eAE1BG,EAAmBpB,EAAM/E,MAQ7B,MAP8B,WAA1B+E,EAAMtG,SAASC,SACfyH,EAAmBpB,EAAM/E,MAAMtB,QAAO,SAAAuB,GAAC,OAAIA,EAAE1C,SAAW7B,EAAagK,QAE3C,cAA1BX,EAAMtG,SAASC,SACfyH,EAAmBpB,EAAM/E,MAAMtB,QAAO,SAAAuB,GAAC,OAAIA,EAAE1C,SAAW7B,EAAa2J,cAGlE,6BACH,4BAAI,kBAACjB,EAAD,CAAchI,MAAO2I,EAAMtG,SAASrC,MAAOiI,YAAayB,EAC1C/C,SAA0C,YAAhCgC,EAAMtG,SAASE,eACvC,kBAACqF,EAAA,EAAD,CAAYC,QA1BG,WACnBc,EAAMqB,eAAerB,EAAMtG,SAASJ,KAyBK0E,SAA0C,YAAhCgC,EAAMtG,SAASE,cAC1D,kBAACiH,EAAA,EAAD,QAGR,kBAACjD,EAAD,CAAaG,QAASM,EAASL,SAA0C,YAAhCgC,EAAMtG,SAASE,eACxD,6BAEQwH,EAAiBnH,KAAI,SAAAiB,GAAC,OAAI,kBAAC6E,GAAD,CACtB3E,KAAMF,EACNkF,gBAAiBJ,EAAMI,gBACvBM,iBAAkBV,EAAMU,iBACxBE,WAAYZ,EAAMY,WAClBrJ,WAAYyI,EAAMtG,SAASJ,GAC3BsF,IAAK1D,EAAE5B,SAInB,yBAAKgI,MAAO,CAACC,WAAY,SACrB,kBAACC,GAAA,EAAD,CAAQxC,QAAmC,QAA1BgB,EAAMtG,SAASC,OAAmB,WAAa,OACxDuF,QAAS8B,EACT7B,MAAO,WAFf,OAKA,kBAACqC,GAAA,EAAD,CAAQxC,QAAmC,WAA1BgB,EAAMtG,SAASC,OAAsB,WAAa,OAC3DuF,QAASgC,EACT/B,MAAO,WAFf,UAIA,kBAACqC,GAAA,EAAD,CAAQxC,QAAmC,cAA1BgB,EAAMtG,SAASC,OAAyB,WAAa,OAC9DuF,QAASiC,EACThC,MAAO,aAFf,kB,6BC/DCsC,GAA0B,WAEnC,IAAMzH,EAAY2D,aAAqD,SAAA1E,GAAK,OAAIA,EAAMe,aAChFiB,EAAQ0C,aAA0C,SAAA1E,GAAK,OAAIA,EAAMgC,SACjET,EAAamD,aAAmC,SAAA1E,GAAK,OAAIA,EAAMkE,KAAK3C,cAEpEvC,EAAWyF,cAEjBgE,qBAAU,WACDlH,GAGLvC,GT0BwC,SAACA,GAC7CA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,IACK8E,MAAK,SAACC,GAGH,OAFAjE,EAASqC,EAAiBP,eAAe,CAACC,UAAWkC,EAAIlE,QACzDC,EAASG,EAAWG,eAAe,CAACC,OAAQ,eACrC0D,EAAIlE,QAEdiE,MAAK,SAAC0F,GACHA,EAAM9F,SAAQ,SAACxC,GACXpB,EAAS+D,EAAa3C,EAAGC,WAGhC8C,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,WSvCrC,IAEH,IAAM2I,EAAaV,uBAAY,SAAC5G,EAAY/B,GACxCU,EN+DoB,SAACV,EAAoBI,GAArB,OAAkD,SAACM,GAC3EA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CP,EAAS8D,EAAaN,yBAAyB,CAAClE,aAAYI,SAAQiC,aAAc,aAClFzC,EAAuBI,EAAYI,GAC9BsE,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAAS8D,EAAaf,aAAa,CAACrD,SAAQJ,gBAC5CU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,OM5E3B2J,CAAarK,EAAY+B,MACnC,IAEG+E,EAAU6B,uBAAY,SAAC7I,EAAeE,GACxCU,EN2EiB,SAACV,EAAoBF,GAArB,OAAiD,SAACY,GACvEA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aACpCrB,EAAuBI,EAAYF,GAC9B4E,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAAS8D,EAAaZ,UAAU,CAACC,KAAMc,EAAIlE,KAAKA,KAAK6J,QACrD5J,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAO,SAAC9D,GACbG,EAAyBH,EAAOL,OMvF3B6J,CAAUvK,EAAYF,MAChC,IAEG0K,EAAe7B,uBAAY,SAAC5G,EAAYd,EAAsBjB,GAChEU,EAASoE,EAAa/C,EAAI/B,EAAY,CAACiB,cACxC,IAEG4H,EAAkBF,uBAAY,SAAC5G,EAAYmG,EAAkBlI,GAC/DU,EAASoE,EAAa/C,EAAI/B,EAAY,CAACF,MAAOoI,OAC/C,IAEGwB,EAAef,uBAAY,SAAC3I,EAAoBmD,GAClD,IAAMxB,EAASoB,EAAiBR,uBAAuB,CAACvC,WAAYA,EAAYoC,OAAQe,IACxFzC,EAASiB,KACV,IAEGmI,EAAiBnB,uBAAY,SAAC3I,GAChCU,ETkBwB,SAACV,GAAD,OAAkC,SAACU,GAC/DA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CP,EAASqC,EAAiBJ,6BAA6B,CAAC3C,WAAYA,EAAYqC,aAAc,aAC9FzC,EAA2BI,GACtB0E,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAASqC,EAAiBtB,iBAAiB,CAACzB,WAAYA,KACxDU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,OS/B3B+J,CAAiBzK,MAC3B,IAEGwJ,EAAsBb,uBAAY,SAAC3I,EAAoBF,GACzDY,ET6C6B,SAACV,EAAoBF,GAArB,OACjC,SAACY,GACDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAA2BI,EAAYF,GAClC4E,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAASqC,EAAiBT,sBAAsB,CAACtC,WAAYA,EAAYF,MAAOA,KAChFY,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,OS1D3BgK,CAAsB1K,EAAYF,MAC5C,IAEG6K,EAAchC,uBAAY,SAAC7I,GAC7BY,ET0BqB,SAACZ,GAAD,OAA6B,SAACY,GACvDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAA2BE,GACtB4E,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAASqC,EAAiBd,cAAc,CAACE,SAAUwC,EAAIlE,KAAKA,KAAK6J,QACjE5J,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,OStC3BkK,CAAc9K,MACxB,IAEH,OAAKmD,EAGE,oCACH,kBAAC4H,GAAA,EAAD,CAAMC,WAAS,EAACf,MAAO,CAACgB,QAAS,SAC7B,kBAAC1E,EAAD,CAAaG,QAASmE,KAE1B,kBAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBvI,EAAUC,KAAI,SAAAZ,GACV,IAAImJ,EAAmBvH,EAAM5B,EAAGC,IAEhC,OAAO,kBAAC8I,GAAA,EAAD,CAAMP,MAAI,EAACjD,IAAKvF,EAAGC,IACtB,kBAACmJ,GAAA,EAAD,CAAOnB,MAAO,CAACgB,QAAS,SACpB,kBAACxB,GAAD,CACIpH,SAAUL,EACV4B,MAAOuH,EACP5B,WAAYA,EACZK,aAAcA,EACd5C,QAASA,EACTqC,iBAAkBqB,EAClBV,eAAgBA,EAChBjB,gBAAiBA,EACjBW,oBAAqBA,WAtBtC,kBAAC,KAAD,CAAU2B,GAAI,Y,gFC5DvBC,GAAQ9E,IAAM+E,YAAuC,SACvD5C,EAAO6C,GACP,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAK7D,QAAQ,UAAagB,OAG3D,SAAS+C,KAEZ,IAAMzK,EAAQqF,aAAyC,SAAC1E,GAAD,OAAWA,EAAMiE,IAAI5E,SACtEL,EAAWyF,cAEXsF,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJjL,EAASG,EAAWC,cAAc,CAACC,MAAO,SAE9C,OACI,kBAAC6K,GAAA,EAAD,CAAUC,KAAgB,OAAV9K,EAAgB+K,iBAAkB,IAAMC,QAASN,GAC7D,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,SACrDnL,I,sDCLJoL,GAAQ,WAEjB,IAAMzL,EAAWyF,cACXlD,EAAamD,aAAmC,SAAA1E,GAAK,OAAIA,EAAMkE,KAAK3C,cAEpEmJ,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAAS5L,OAAS,IAChCgM,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GVpBK,IAACpM,EUqBZG,GVrBYH,EUqBKoM,EVrBwB,SAACjM,GAClDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CX,EAAcC,GACTmE,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAAS2C,EAAYH,gBAAgB,CAACC,OAAO,KAC7CzC,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,SUUhC0L,EAAOW,eAIf,OAAI9J,EACO,kBAAC,KAAD,CAAUkI,GAAI,MAGlB,kBAACN,GAAA,EAAD,CAAMC,WAAS,EAACkC,eAAgB,UACnC,kBAACnC,GAAA,EAAD,CAAMP,MAAI,EAAC0C,eAAgB,UACvB,0BAAMF,SAAUV,EAAOa,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,UADX,UAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACtG,EAAA,EAAD,eAAWQ,MAAM,QACN+F,OAAO,UACHnB,EAAOoB,cAAc,SAFpC,CAGWnF,OAAQ+D,EAAOqB,cAEzBrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOL,MACnC,yBAAKxC,MAAO,CAACnC,MAAO,QAASwE,EAAOQ,OAAOL,OAAe,KAC9D,kBAACvF,EAAA,EAAD,eAAW2G,KAAK,WACLnG,MAAM,WACN+F,OAAO,UACHnB,EAAOoB,cAAc,YAHpC,CAIWnF,OAAQ+D,EAAOqB,cAEzBrB,EAAOsB,QAAQlB,UAAYJ,EAAOQ,OAAOJ,SACtC,yBAAKzC,MAAO,CAACnC,MAAO,QAASwE,EAAOQ,OAAOJ,UAAkB,KACjE,kBAACoB,GAAA,EAAD,CAAkBpG,MAAO,cACPqG,QAAS,kBAAC7E,EAAA,EAAD,CAAU/B,SAAUmF,EAAO0B,aACjB7E,QAASmD,EAAOO,OAAOF,WACvBnL,KAAK,iBAE1C,kBAAC2I,GAAA,EAAD,CAAQ0D,KAAM,SAAUlG,QAAS,YAAaG,MAAO,WAArD,e,UCpBTmG,OAnDf,WACI,IAAMrN,EAAWyF,cAEjBgE,qBAAU,WACNzJ,GVkBuC,SAACA,GAC5CJ,IAAaoE,MAAK,SAACC,GACfjE,EAASG,EAAW0C,mBAAmB,CAACD,eAAe,KAC3B,IAAxBqB,EAAIlE,KAAK6E,WACT5E,EAAS2C,EAAYH,gBAAgB,CAACC,OAAO,KAE7C3C,EAAqBmE,EAAIlE,KAAMC,MAGlCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,WU3BrC,IAEH,IAAMO,EAASmF,aAA6C,SAAC1E,GAAD,OAAWA,EAAMiE,IAAI1E,UAC3EqC,EAAgB8C,aAAmC,SAAA1E,GAAK,OAAIA,EAAMiE,IAAIrC,iBACtEL,EAAamD,aAAmC,SAAA1E,GAAK,OAAIA,EAAMkE,KAAK3C,cAEpE+K,EAAgBrF,uBAAY,WAC9BjI,GXUsB,SAACA,GAC3BA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CX,IACKoE,MAAK,SAACC,GACyB,IAAxBA,EAAIlE,KAAK6E,YACT5E,EAAS2C,EAAYH,gBAAgB,CAACC,OAAO,KAC7CzC,EAASG,EAAWG,eAAe,CAACC,OAAQ,eAC5CP,EAASqC,EAAiBH,wBAE1BpC,EAAqBmE,EAAIlE,KAAMC,MAGtCmE,OAAM,SAAC9D,GACJG,EAAyBH,EAAOL,WWtBrC,IAEH,OAAK4C,EAQD,yBAAKwF,UAAU,OACX,kBAAC0C,GAAD,MACA,kBAACyC,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KACI,kBAACzG,EAAA,EAAD,CAAY0G,KAAK,QAAQxG,MAAM,UAAUyG,aAAW,QAChD,kBAACC,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CAAY9G,QAAQ,MAApB,SAGExE,GAAc,kBAACgH,GAAA,EAAD,CAAQrC,MAAM,WAAd,SACf3E,GAAc,kBAACgH,GAAA,EAAD,CAAQrC,MAAM,UAAUD,QAASqG,GAAjC,WAEP,YAAX/M,GAAwB,kBAACuN,GAAA,EAAD,OAE7B,kBAACC,GAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAO,IAAIC,QAAW,kBAAC,GAAD,QAC7B,kBAAC,KAAD,CAAOD,KAAO,YAAYC,QAAW,kBAAC,GAAD,QACrC,kBAAC,KAAD,CAAOD,KAAO,SAASC,QAAW,kBAAC,GAAD,QAClC,kBAAC,KAAD,CAAOD,KAAO,OAAOC,QAAW,qDAChC,kBAAC,KAAD,CAAOD,KAAO,IAAIC,QAAW,kBAAC,KAAD,CAAUzD,GAAG,cA5B/C,yBACHpB,MAAO,CAACmE,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAU5C,MAAO,SACnE,kBAAC6C,GAAA,EAAD,Q,SC9BZC,IAASC,OACL,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAUpJ,MAAOA,GACb,kBAAC,GAAD,QAGLqJ,SAASC,eAAe,ShB4HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5K,MAAK,SAAA6K,GACJA,EAAaC,gBAEd3K,OAAM,SAAA9D,GACLwE,QAAQxE,MAAMA,EAAMI,c","file":"static/js/main.1bc02753.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`,\r\n            {title: title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport {ResponseType} from '../api/todolist-api'\r\nimport {appActions} from \"../app/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(appActions.setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof appActions.setAppErrorAC > | ReturnType<typeof appActions.setAppStatusAC>>","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {AppDispatch, AppThunk} from \"../../app/store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            },\r\n            addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n            },\r\n            changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].title = action.payload.title\r\n            },\r\n            changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            },\r\n            clearTodolistDataAC() {\r\n                return []\r\n            }\r\n        }\r\n    }\r\n)\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(todolistsActions.setTodolistsAC({todolists: res.data}))\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(fetchTasksTC(tl.id))\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    dispatch(todolistsActions.changeTodolistEntityStatusAC({todolistId: todolistId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.removeTodolistAC({todolistId: todolistId}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string): AppThunk =>\r\n    (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.changeTodolistTitleAC({todolistId: todolistId, title: title}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {todolistsActions} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\n//state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authActions = slice.actions\r\n\r\n// thunks\r\n\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authActions.setIsLoggedInAC({value: true}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authActions.setIsLoggedInAC({value: false}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(todolistsActions.clearTodolistDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppDispatch, AppThunk} from \"./store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../features/Auth/auth-reducer\";\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n// state\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState: initialState,\r\n        reducers: {\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const appActions = slice.actions\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    authAPI.me().then((res) => {\r\n        dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(authActions.setIsLoggedInAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {AppDispatch, AppStateType, AppThunk} from \"../../app/store\";\r\nimport {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistAPI,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsActions} from \"./todolists-reducer\";\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            },\r\n            addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task)\r\n            },\r\n            updateTaskAC(state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n            },\r\n            setTasksAC(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            },\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: (builder) => {\r\n            builder.addCase(todolistsActions.addTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            builder.addCase(todolistsActions.removeTodolistAC, (state, action) => {\r\n                delete state[action.payload.todolistId]\r\n            })\r\n            builder.addCase(todolistsActions.setTodolistsAC, (state, action) => {\r\n                action.payload.todolists.forEach((tl) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            builder.addCase(todolistsActions.clearTodolistDataAC, () => {\r\n                return {}\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer =slice.reducer;\r\n\r\nexport const tasksActions = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(tasksActions.setTasksAC({todolistId, tasks}))\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    dispatch(tasksActions.changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(tasksActions.removeTaskAC({taskId, todolistId}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n            todolistAPI.createTask(todolistId, title)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(tasksActions.addTaskAC({task: res.data.data.item}))\r\n                        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch ((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType): AppThunk => (dispatch: AppDispatch, getState: () => AppStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(tasksActions.updateTaskAC({taskId, domainModel, todolistId}))\r\n                    dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AnyAction, combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// export type AppRootStateType = ReturnType<typeof store.getState>\r\n// export type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch=typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport type AppThunkDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'all'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'active'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"),\r\n        [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, todolistsActions, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = todolistsActions.changeTodolistFilterAC({todolistId: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appActions.setAppErrorAC({error: null}))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport { logoutTC } from '../features/Auth/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}