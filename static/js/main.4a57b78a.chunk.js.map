{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","fetchTasksTC","then","res","tasks","items","setTasksAC","catch","updateTaskTC","domainModel","getState","task","find","t","id","apiModel","startDate","priority","description","deadline","resultCode","action","updateTaskAC","console","warn","rootReducer","combineReducers","todolists","state","filter","tl","todolist","entityStatus","map","todoListId","copyState","stateCopy","forEach","app","auth","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","props","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","useDispatch","useEffect","todos","changeTaskEntityStatusAC","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","changeTodolistFilterAC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","handleChange","name","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a57b78a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TodolistType}>>>('todo-lists',\r\n            { title: title })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`,\r\n            { title: title })\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`,\r\n            { title: taskTitle })\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { Dispatch } from 'redux'\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppErrorAC > | ReturnType<typeof setAppStatusAC>>","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC, setTasksAC} from \"./tasks-reducer\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type ClearTodolistDataActionType = ReturnType<typeof clearTodolistDataAC>\r\ntype ActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ClearTodolistDataActionType\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case \"CLEAR-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', title, todolistId} as const)\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const)\r\nexport const clearTodolistDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: any) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(fetchTasksTC(tl.id))\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodolistDataAC, ClearTodolistDataActionType} from \"../TodolistsList/todolists-reducer\";\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ClearTodolistDataActionType\r\n\r\n//state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC  = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(clearTodolistDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({ type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({ type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({ type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then((res) => {\r\n        dispatch(setIsInitializedAC(true))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>","import {\r\n    AddTodolistActionType,\r\n    ClearTodolistDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ClearTodolistDataActionType\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)}\r\n        case \"CLEAR-DATA\":\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', domainModel, todolistId, taskId} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'SET-TASKS', todolistId, tasks} as const)\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType ) => ({type: 'CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n    dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo( ({title, changeTitle, disabled = false}: EditableSpanPropsType)  => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(props.todolist.id, 'all'), [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(props.todolist.id, 'active'), [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(props.todolist.id, \"completed\"), [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle} disabled={props.todolist.entityStatus === 'loading'} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks )\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null }\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Auth/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { !isLoggedIn && <Button color=\"inherit\">Login</Button> }\r\n                    { isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button> }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}