{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","state/tasks-reducer.ts","api/todolist-api.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","taskAPI","todolistId","get","taskTitle","post","title","taskId","delete","model","put","initialState","count","todolistAPI","rootReducer","combineReducers","todolists","state","action","type","filter","tl","id","addedDate","order","todolist","find","map","tasks","stateCopy","newTasks","t","task","todoListId","todolistTasks","newTasksArray","status","copyState","forEach","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","console","log","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","dispatch","useDispatch","useEffect","then","res","data","items","setTasksAC","changeTodolistTitle","tasksForTodolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","style","paddingTop","Button","AppWithRedux","useSelector","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","getState","startDate","priority","description","deadline","changeTaskStatusAC","warn","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.23e985f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {ResponseType} from \"./todolist-api\";\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n\r\nexport const taskAPI = {\r\n    getTask(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        const promise = instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`,\r\n            { title: taskTitle })\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        const promise = instance.put<UpdateTaskModelType, ResponseType<{item: TaskType}>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model\r\n        )\r\n        return promise\r\n    },\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {taskAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/task-api\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    todolistId: string\r\n    status: TaskStatuses\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    count: []\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, status: action.status}\r\n                    : t)\r\n            state[action.todolistId] = newTasksArray\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', todolistId, tasks}\r\n}\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    taskAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            const action = addTaskAC(res.data.data.item)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: status\r\n        }\r\n        taskAPI.updateTask(todolistId, taskId, model)\r\n            .then(res => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        }\r\n        taskAPI.updateTask(todolistId, taskId, model)\r\n            .then(res => {\r\n                const action = changeTaskTitleAC(taskId, title, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        const promise = instance.get<Array<TodolistType>>('todo-lists')\r\n        return promise\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{item: TodolistType}>>('todo-lists',\r\n            { title: title })\r\n        return promise\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(\r\n            `todo-lists/${todolistId}`,\r\n            { title: title }\r\n        )\r\n        return promise\r\n    },\r\n}","import {v1} from 'uuid';\r\nimport {todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    todolistId: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS',\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\", addedDate: '', order: 0}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.todolistId);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.todolistId);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', todolistId: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, todolistId: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, todolistId: todolistId}\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return { type: 'SET-TODOLISTS', todolists}\r\n}\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n    })\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(\"completed\", props.id), [props.id, props.changeFilter]);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodolistsTC, FilterValuesType,\r\n    removeTodolistAC, TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC, updateTaskStatusTC, updateTaskTitleTC\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/task-api\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks )\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusTC(id, todolistId, status));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTitleTC(id, todolistId, newTitle));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const action = removeTodolistAC(todolistId)\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        const action = changeTodolistTitleAC(todolistId, title);\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}