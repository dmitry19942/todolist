{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","changeTitle","onBlur","autoFocus","charCode","onDoubleClick","Todolist","changeTodoListTitle","id","removeTodolist","Delete","style","listStyle","padding","tasks","map","t","className","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","margin","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","changeTodolistTitle","newTodoListID","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0352b0f8.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodoListTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(props.id, title)\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <IconButton\r\n                size={'small'}\r\n                onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '0'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={changeTaskStatus}\r\n                        />\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                        <IconButton\r\n                            size={'small'}\r\n                            onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                onClick={onAllClickHandler}\r\n            >All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                onClick={onActiveClickHandler}\r\n                style={{margin: '0 3px'}}\r\n            >Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist, TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1()\r\n    let todolistId2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: true}],\r\n    })\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListID = v1()\r\n        setTodolists([...todolists, {id: newTodoListID, title, filter: 'all'}])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const todolist = todolists.find(tl => tl.id === id)\r\n        if (todolist) {\r\n            todolist.title = title\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {\r\n                todolists.map((tl) => {\r\n\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodolistTitle}\r\n                    />\r\n                })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}