{"version":3,"sources":["AddItemForm.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","Todolist","removeTodolist","id","addTask","tasks","map","t","key","isDone","type","checked","changeTaskStatus","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","newTodoListID","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4f8be1bb.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n\r\n    return <div>\r\n        <h3>{props.title} <button onClick={removeTodolist}>x</button></h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\" checked={t.isDone}\r\n                               onChange={changeTaskStatus}\r\n                        />\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={ onAllClickHandler }>All</button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={ onActiveClickHandler }>Active</button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={ onCompletedClickHandler }>Completed</button>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist, TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1()\r\n    let todolistId2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: true}],\r\n    })\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListID = v1()\r\n        setTodolists([...todolists, {id: newTodoListID, title, filter: 'all'}])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {\r\n                todolists.map((tl) => {\r\n\r\n                    let tasksForTodolist = tasks[tl.id];\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}