{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","initialState","status","error","setAppStatusAC","type","setAppErrorAC","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","then","res","resultCode","action","updateTaskAC","catch","console","warn","rootReducer","combineReducers","todolists","state","filter","tl","todolist","entityStatus","map","todoListId","copyState","stateCopy","forEach","app","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","props","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","useDispatch","useEffect","items","setTasksAC","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","changeTaskEntityStatusAC","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","changeTodolistFilterAC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICFMC,EAMAC,E,uCCpBNC,EAAiC,CACnCC,OAAQ,OACRC,MAAO,MAmBEC,EAAiB,SAACF,GAAD,MACzB,CAAEG,KAAM,iBAAkBH,WAClBI,EAAgB,SAACH,GAAD,MACxB,CAAEE,KAAM,gBAAiBF,U,2BDVlBJ,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAmCZ,IAAMO,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIRE,GACX,OAAOR,EAASS,KAAyE,aACrF,CAAED,MAAOA,KANRF,EAAc,SAQRI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAT9CJ,EAAc,SAWRI,EAAoBF,GAC/B,OAAOR,EAASY,IAAT,qBAA2EF,GAC9E,CAAEF,MAAOA,KAbRF,EAAc,SAefI,GACJ,OAAOV,EAASO,IAAT,qBAAiDG,EAAjD,YAhBFJ,EAAc,SAkBZI,EAAoBG,GAC3B,OAAOb,EAASS,KAAT,qBAAgGC,EAAhG,UACH,CAAEF,MAAOK,KApBRP,EAAc,SAsBZI,EAAoBI,GAC3B,OAAOd,EAASW,OAAT,qBAA4CD,EAA5C,kBAAgEI,KAvBlER,EAAc,SAyBZI,EAAoBI,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBACWF,EADX,kBAC+BI,GAAUC,IExF3CC,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASnB,EAAckB,EAAKE,SAAS,KAErCD,EAASnB,EAAc,wBAE3BmB,EAASrB,EAAe,YAGfwB,EAA2B,SAACzB,EAA4BsB,GACjEA,EAASnB,EAAcH,EAAM0B,QAAU1B,EAAM0B,QAAU,wBACvDJ,EAASrB,EAAe,YCiBtBH,EAA+B,GAqFxB6B,EAAe,SAACT,EAAgBJ,EAAoBc,GAArC,OAAgF,SAACN,EAAiCO,GACtI,IAEMC,EAFoBD,IAAWE,MACajB,GACbkB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOhB,KACxD,GAAKY,EAAL,CAIA,IAAMK,EAA6B,aAC/BvB,MAAOkB,EAAKlB,MACZwB,UAAWN,EAAKM,UAChBC,SAAUP,EAAKO,SACfC,YAAaR,EAAKQ,YAClBC,SAAUT,EAAKS,SACfxC,OAAQ+B,EAAK/B,QACV6B,GAEXN,EAASrB,EAAe,YACpBS,EAAuBI,EAAYI,EAAQiB,GACtCK,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIpB,KAAKqB,WAAkB,CAC3B,IAAMC,EArEE,SAACzB,EAAgBU,EAAwCd,GAAzD,MAAiF,CAACZ,KAAM,cAAe0B,cAAad,aAAYI,UAqEzH0B,CAAa1B,EAAQU,EAAad,GACjDQ,EAASqB,GACTrB,EAASrB,EAAe,mBAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,WAxBpCwB,QAAQC,KAAK,iCClGnBjD,EAA0C,G,QClB1CkD,EAAcC,YAAgB,CAChCC,UDmB4B,WAAsG,IAArGC,EAAoG,uDAAjErD,EAAc6C,EAAmD,uCACjI,OAAQA,EAAOzC,MACX,IAAK,kBACD,OAAOiD,EAAMC,QAAO,SAAAC,GAAE,OAAIA,EAAGnB,KAAOS,EAAO7B,cAC/C,IAAK,eACD,MAAM,CAAN,2BAAY6B,EAAOW,UAAnB,IAA6BF,OAAQ,MAAOG,aAAc,UAA1D,mBAAsEJ,IAC1E,IAAK,wBACD,OAAOA,EAAMK,KAAI,SAAAH,GAAE,OAAIA,EAAGnB,KAAOS,EAAO7B,WAAjB,2BAAkCuC,GAAlC,IAAsCzC,MAAO+B,EAAO/B,QAASyC,KACxF,IAAK,yBACD,OAAOF,EAAMK,KAAI,SAAAH,GAAE,OAAIA,EAAGnB,KAAOS,EAAO7B,WAAjB,2BAAkCuC,GAAlC,IAAsCD,OAAQT,EAAOS,SAAUC,KAC1F,IAAK,gBACD,OAAOV,EAAOO,UAAUM,KAAI,SAAAH,GAAE,kCAASA,GAAT,IAAaD,OAAQ,MAAOG,aAAc,YAC5E,IAAK,gCACD,OAAOJ,EAAMK,KAAI,SAAAH,GAAE,OAAIA,EAAGnB,KAAOS,EAAO7B,WAAjB,2BAAkCuC,GAAlC,IAAsCE,aAAcZ,EAAOY,eAAgBF,KACtG,QACI,OAAOF,ICjCfpB,MF0BwB,WAAgF,IAA/EoB,EAA8E,uDAAtDrD,EAAc6C,EAAwC,uCACvG,OAAQA,EAAOzC,MACX,IAAK,cACD,OAAO,2BAAIiD,GAAX,kBAAmBR,EAAO7B,WAAaqC,EAAMR,EAAO7B,YAAYsC,QAAO,SAAAnB,GAAC,OAAIA,EAAEC,KAAOS,EAAOzB,YAChG,IAAK,WACD,OAAO,2BAAIiC,GAAX,kBAAmBR,EAAOb,KAAK2B,WAA/B,CAA6Cd,EAAOb,MAApD,mBAA6DqB,EAAMR,EAAOb,KAAK2B,gBACnF,IAAK,cACD,OAAO,2BAAIN,GAAX,kBAAmBR,EAAO7B,WAAaqC,EAAMR,EAAO7B,YAAY0C,KAAI,SAAAvB,GAAC,OAAIA,EAAEC,KAAOS,EAAOzB,OAAhB,2BAA6Be,GAAMU,EAAOf,aAAeK,OACtI,IAAK,eACD,OAAO,2BAAIkB,GAAX,kBAAmBR,EAAOW,SAASpB,GAAK,KAC5C,IAAK,kBACD,IAAMwB,EAAS,eAAOP,GAEtB,cADOO,EAAUf,EAAO7B,YACjB4C,EACX,IAAK,gBACD,IAAMC,EAAS,eAAOR,GAItB,OAHAR,EAAOO,UAAUU,SAAQ,SAACP,GACtBM,EAAUN,EAAGnB,IAAM,MAEhByB,EAEX,IAAK,YACD,OAAO,2BAAIR,GAAX,kBAAmBR,EAAO7B,WAAa6B,EAAOZ,QAClD,IAAK,4BACD,OAAO,2BAAIoB,GAAX,kBAAmBR,EAAO7B,WAAaqC,EAAMR,EAAO7B,YAAY0C,KAAI,SAAAvB,GAAC,OAAIA,EAAEC,KAAOS,EAAOzB,OAAhB,2BAA6Be,GAA7B,IAAgCsB,aAAcZ,EAAOY,eAAgBtB,OAClJ,QACI,OAAOkB,IEnDfU,IJEsB,WAAoF,IAAnFV,EAAkF,uDAAxDrD,EAAc6C,EAA0C,uCACzG,OAAQA,EAAOzC,MACX,IAAK,iBACD,OAAO,2BAAIiD,GAAX,IAAkBpD,OAAQ4C,EAAO5C,SACrC,IAAK,gBACD,OAAO,2BAAIoD,GAAX,IAAkBnD,MAAO2C,EAAO3C,QACpC,QACI,OAAOmD,MIJNW,EAAQC,YAAYf,EAAagB,YAAgBC,MAI9DzE,OAAOsE,MAAQA,E,8CCTFI,EAAcC,IAAMC,MAAK,YAAwD,IAAtDC,EAAqD,EAArDA,QAAqD,IAA5CC,gBAA4C,SACzF,EAAsCC,mBAAiB,IAAvD,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,oBAAkB,GAA1C,mBAAKvE,EAAL,KAAY0E,EAAZ,KAOMC,EAAU,WACgB,KAAxBH,EAAaI,OACbP,EAAQG,EAAaI,QAErBF,GAAS,GAEbD,EAAgB,KASpB,OACI,6BACI,kBAACI,EAAA,EAAD,CACIC,MAAON,EACPO,SAxBY,SAACC,GACrBN,GAAS,GACTD,EAAgBO,EAAEC,cAAcH,QAuBxBI,WAXc,SAACF,GACT,UAAVA,EAAEG,KACFR,KAUIL,SAAUA,EACVc,KAAM,QACNpF,MAAOA,EACPqF,WAAYrF,GAAS,qBACrBsF,MAAO,QACPC,QAAS,aAEb,kBAACC,EAAA,EAAD,CACIC,QAASd,EACTe,MAAO,UACPpB,SAAUA,GAEV,kBAACqB,EAAA,EAAD,WC3CHC,EAAezB,IAAMC,MAAM,YAAqE,IAAnExD,EAAkE,EAAlEA,MAAOiF,EAA2D,EAA3DA,YAA2D,IAA9CvB,gBAA8C,SACxG,EAA8BC,oBAAkB,GAAhD,mBAAKuB,EAAL,KAAeC,EAAf,KACA,EAA8BxB,mBAAiB3D,GAA/C,mBAAKoF,EAAL,KAAeC,EAAf,KAWMC,EAAc,WAChBH,GAAY,GACZF,EAAYG,IAShB,OACIF,EACM,kBAACjB,EAAA,EAAD,CACEE,SAvBe,SAACC,GACxBiB,EAAYjB,EAAEC,cAAcH,QAuBpBA,MAAOkB,EACPG,OAAQD,EACRE,WAAS,EACTlB,WAbkB,SAACF,GACb,UAAVA,EAAEG,KACFe,OAaE,0BAAMG,cA1BG,WACX/B,GAGJyB,GAAY,KAsB4BnF,M,kBC5BnC0F,EAAOnC,IAAMC,MAAM,SAACmC,GAC7B,IAKMC,EAAuBC,uBAAa,SAACC,GACvCH,EAAMI,gBAAgBJ,EAAMzE,KAAKI,GAAIwE,EAAUH,EAAMzF,cACtD,CAACyF,EAAMzE,KAAKI,GAAIqE,EAAMI,gBAAiBJ,EAAMzF,aAEhD,OAAO,yBAAKqE,IAAKoB,EAAMzE,KAAKI,GAAI0E,UAAWL,EAAMzE,KAAK/B,SAAWH,EAAaiH,UAAY,UAAY,IAClG,kBAACC,EAAA,EAAD,CACIC,QAASR,EAAMzE,KAAK/B,SAAWH,EAAaiH,UAC5CnB,MAAM,UACNX,SAZgB,SAACC,GACrB,IAAIgC,EAAiBhC,EAAEC,cAAc8B,QACrCR,EAAMU,iBAAiBV,EAAMzE,KAAKI,GAAI8E,EAAiBpH,EAAaiH,UAAYjH,EAAasH,IAAKX,EAAMzF,aAWpGwD,SAAsC,YAA5BiC,EAAMzE,KAAKyB,eAGzB,kBAACqC,EAAD,CAAchF,MAAO2F,EAAMzE,KAAKlB,MAAOiF,YAAaW,EAAsBlC,SAAsC,YAA5BiC,EAAMzE,KAAKyB,eAC/F,kBAACiC,EAAA,EAAD,CAAYC,QAlBO,kBAAMc,EAAMY,WAAWZ,EAAMzE,KAAKI,GAAIqE,EAAMzF,aAkB1BwD,SAAsC,YAA5BiC,EAAMzE,KAAKyB,cACtD,kBAAC6D,EAAA,EAAD,W,SCTCC,EAAWlD,IAAMC,MAAK,SAAUmC,GACzC,IAAMjF,EAAWgG,cAEjBC,qBAAU,WNgDc,IAACzG,EM/CrBQ,GN+CqBR,EM/CCyF,EAAMjD,SAASpB,GN+CO,SAACZ,GACjDA,EAASrB,EAAe,YACxBS,EAAoBI,GACf0B,MAAK,SAACC,GACH,IAAMV,EAAQU,EAAIpB,KAAKmG,MACvBlG,EAVc,SAACR,EAAoBiB,GAArB,MACrB,CAAC7B,KAAM,YAAaY,aAAYiB,SAShB0F,CAAW3G,EAAYiB,IAChCT,EAASrB,EAAe,sBMpD7B,IAEH,IAAM0E,EAAU8B,uBAAY,SAAC7F,GACzB2F,EAAM5B,QAAQ/D,EAAO2F,EAAMjD,SAASpB,MACrC,CAACqE,EAAM5B,QAAS4B,EAAMjD,SAASpB,KAK5BwF,EAAsBjB,uBAAa,SAAC7F,GACtC2F,EAAMmB,oBAAoBnB,EAAMjD,SAASpB,GAAItB,KAC9C,CAAC2F,EAAMmB,oBAAqBnB,EAAMjD,SAASpB,KAGxCyF,EAAoBlB,uBAAa,kBAAMF,EAAMqB,aAAarB,EAAMjD,SAASpB,GAAI,SAAQ,CAACqE,EAAMjD,SAASpB,GAAIqE,EAAMqB,eAC/GC,EAAuBpB,uBAAa,kBAAMF,EAAMqB,aAAarB,EAAMjD,SAASpB,GAAI,YAAW,CAACqE,EAAMjD,SAASpB,GAAIqE,EAAMqB,eACrHE,EAA0BrB,uBAAa,kBAAMF,EAAMqB,aAAarB,EAAMjD,SAASpB,GAAI,eAAc,CAACqE,EAAMjD,SAASpB,GAAIqE,EAAMqB,eAE7HG,EAAmBxB,EAAMxE,MAQ7B,MAP8B,WAA1BwE,EAAMjD,SAASF,SACf2E,EAAmBxB,EAAMxE,MAAMqB,QAAO,SAAAnB,GAAC,OAAIA,EAAElC,SAAWH,EAAasH,QAE3C,cAA1BX,EAAMjD,SAASF,SACf2E,EAAmBxB,EAAMxE,MAAMqB,QAAO,SAAAnB,GAAC,OAAIA,EAAElC,SAAWH,EAAaiH,cAGlE,6BACH,gCAAK,kBAACjB,EAAD,CAAchF,MAAO2F,EAAMjD,SAAS1C,MAAOiF,YAAa6B,EAAqBpD,SAA0C,YAAhCiC,EAAMjD,SAASC,eACvG,kBAACiC,EAAA,EAAD,CAAYC,QAtBG,WACnBc,EAAMyB,eAAezB,EAAMjD,SAASpB,KAqBKoC,SAA0C,YAAhCiC,EAAMjD,SAASC,cAC1D,kBAAC6D,EAAA,EAAD,QAGR,kBAAClD,EAAD,CAAaG,QAASM,EAASL,SAA0C,YAAhCiC,EAAMjD,SAASC,eACxD,6BAEQwE,EAAiBvE,KAAI,SAAAvB,GAAC,OAAI,kBAACqE,EAAD,CACtBxE,KAAMG,EACN0E,gBAAiBJ,EAAMI,gBACvBM,iBAAkBV,EAAMU,iBACxBE,WAAYZ,EAAMY,WAClBrG,WAAYyF,EAAMjD,SAASpB,GAC3BiD,IAAKlD,EAAEC,SAInB,yBAAK+F,MAAO,CAAEC,WAAY,SACtB,kBAACC,EAAA,EAAD,CAAQ5C,QAAmC,QAA1BgB,EAAMjD,SAASF,OAAmB,WAAa,OACxDqC,QAASkC,EACTjC,MAAO,WAFf,OAKA,kBAACyC,EAAA,EAAD,CAAQ5C,QAAmC,WAA1BgB,EAAMjD,SAASF,OAAsB,WAAa,OAC3DqC,QAASoC,EACTnC,MAAO,WAFf,UAIA,kBAACyC,EAAA,EAAD,CAAQ5C,QAAmC,cAA1BgB,EAAMjD,SAASF,OAAyB,WAAa,OAC9DqC,QAASqC,EACTpC,MAAO,aAFf,kB,kBCnEC0C,EAA0B,WAEnC,IAAMlF,EAAYmF,aAA0D,SAAAlF,GAAK,OAAIA,EAAMD,aACrFnB,EAAQsG,aAA+C,SAAAlF,GAAK,OAAIA,EAAMpB,SAEtET,EAAWgG,cAEjBC,qBAAU,WACNjG,GNmC8B,SAACA,GACnCA,EAASrB,EAAe,YACxBS,IACK8B,MAAK,SAACC,GACHnB,EATP,CAACpB,KAAM,gBAAiBgD,UASOT,EAAIpB,OAC5BC,EAASrB,EAAe,sBMvC7B,IAEH,IAAMkH,EAAaV,uBAAY,SAACvE,EAAYpB,GACxCQ,EPuDoB,SAACR,EAAoBI,GAArB,OAAwC,SAACI,GACjEA,EAASrB,EAAe,YACxBqB,EAdoC,SAACR,EAAoBI,EAAgBqC,GAArC,MAA2E,CAACrD,KAAM,4BAA6BY,aAAYI,SAAQqC,gBAc9J+E,CAAyBxH,EAAYI,EAAQ,YACtDR,EAAuBI,EAAYI,GAC9BsB,MAAK,SAACC,GACH,GAA4B,IAAxBA,EAAIpB,KAAKqB,WAAkB,CAC3B,IAAMC,EAzBM,SAACzB,EAAgBJ,GAAjB,MACvB,CAACZ,KAAM,cAAegB,SAAQJ,cAwBJyH,CAAarH,EAAQJ,GACpCQ,EAASqB,GACTrB,EAASrB,EAAe,mBAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,OOrE3BkH,CAAa1H,EAAYoB,MACnC,CAACZ,IAEEqD,EAAU8B,uBAAY,SAAC7F,EAAeE,GACxCQ,EPoEiB,SAACR,EAAoBF,GAArB,OAAuC,SAACU,GAC7DA,EAASrB,EAAe,YACxBS,EAAuBI,EAAYF,GAC9B4B,MAAK,SAACC,GACH,GAA4B,IAAxBA,EAAIpB,KAAKqB,WAAkB,CAC3B,IAAMC,EAtCjB,CAACzC,KAAM,WAAY4B,KAsCiBW,EAAIpB,KAAKA,KAAKoH,MACvCnH,EAASqB,GACTrB,EAASrB,EAAe,mBAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,OOjF3BoH,CAAU5H,EAAYF,MAChC,CAACU,IAEEqH,EAAelC,uBAAY,SAACvE,EAAYnC,EAAsBe,GAChEQ,EAASK,EAAaO,EAAIpB,EAAY,CAACf,cACxC,CAACuB,IAEEqF,EAAkBF,uBAAY,SAACvE,EAAY8D,EAAkBlF,GAC/DQ,EAASK,EAAaO,EAAIpB,EAAY,CAACF,MAAOoF,OAC/C,CAAC1E,IAEEsG,EAAenB,uBAAY,SAAC3F,EAAoBgE,GAClD,IAAMnC,ENOwB,SAAC7B,EAAoBsC,GAArB,MACjC,CAAClD,KAAM,yBAA0BY,aAAYsC,UMR3BwF,CAAuB9H,EAAYgE,GAClDxD,EAASqB,KACV,CAACrB,IAEE0G,EAAiBvB,uBAAY,SAAC3F,GAChCQ,ENkBwB,SAACR,GAAD,OAAwB,SAACQ,GACrDA,EAASrB,EAAe,YACxBqB,EAdwC,SAACR,EAAoByC,GAArB,MACvC,CAACrD,KAAM,gCAAiCY,aAAYyC,gBAa5CsF,CAA6B/H,EAAY,YAClDJ,EAA2BI,GACtB0B,MAAK,SAACC,GACyB,IAAxBA,EAAIpB,KAAKqB,YACTpB,EA5BgB,SAACR,GAAD,MAC3B,CAACZ,KAAM,kBAAmBY,cA2BNgI,CAAiBhI,IAC1BQ,EAASrB,EAAe,eAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,OM/B3ByH,CAAiBjI,MAC3B,CAACQ,IAEEoG,EAAsBjB,uBAAY,SAAC3F,EAAoBF,GACzDU,EN6C6B,SAACR,EAAoBF,GAArB,OAAuC,SAACU,GACzEA,EAASrB,EAAe,YACxBS,EAA2BI,EAAYF,GAClC4B,MAAK,SAACC,GACyB,IAAxBA,EAAIpB,KAAKqB,YACTpB,EAtDqB,SAACR,EAAoBF,GAArB,MAChC,CAACV,KAAM,wBAAyBU,QAAOE,cAqDnBkI,CAAsBlI,EAAYF,IAC3CU,EAASrB,EAAe,eAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,OMzD3B2H,CAAsBnI,EAAYF,MAC5C,CAACU,IAEE4H,EAAczC,uBAAY,SAAC7F,GAC7BU,EN0BqB,SAACV,GAAD,OAAmB,SAACU,GAC7CA,EAASrB,EAAe,YACxBS,EAA2BE,GACtB4B,MAAK,SAACC,GACyB,IAAxBA,EAAIpB,KAAKqB,YACTpB,EAxCX,CAACpB,KAAM,eAAgBoD,SAwCWb,EAAIpB,KAAKA,KAAKoH,OACrCnH,EAASrB,EAAe,eAExBmB,EAAqBqB,EAAIpB,KAAMC,MAGtCuB,OAAM,SAAC7C,GACJyB,EAAyBzB,EAAOsB,OMtC3B6H,CAAcvI,MACxB,CAACU,IAGJ,OAAO,oCACH,kBAAC8H,EAAA,EAAD,CAAMC,WAAS,EAACpB,MAAO,CAACqB,QAAS,SAC7B,kBAACpF,EAAD,CAAaG,QAAS6E,KAE1B,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBrG,EAAUM,KAAI,SAAAH,GACV,IAAImG,EAAmBzH,EAAMsB,EAAGnB,IAEhC,OAAO,kBAACkH,EAAA,EAAD,CAAMX,MAAI,EAACtD,IAAK9B,EAAGnB,IACtB,kBAACuH,EAAA,EAAD,CAAOxB,MAAO,CAACqB,QAAS,SACpB,kBAACjC,EAAD,CACI/D,SAAUD,EACVtB,MAAOyH,EACPrC,WAAYA,EACZS,aAAcA,EACdjD,QAASA,EACTsC,iBAAkB0B,EAClBX,eAAgBA,EAChBrB,gBAAiBA,EACjBe,oBAAqBA,Y,4EC5E/CgC,GAAQvF,IAAMwF,YAAuC,SACvDpD,EAAOqD,GACP,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAKrE,QAAQ,UAAagB,OAG3D,SAASuD,KAEZ,IAAM9J,EAAQqI,aAA6C,SAAClF,GAAD,OAAWA,EAAMU,IAAI7D,SAC1EsB,EAAWgG,cAEXyC,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ3I,EAASnB,EAAc,QAE3B,OACI,kBAAC+J,GAAA,EAAD,CAAUC,KAAgB,OAAVnK,EAAgBoK,iBAAkB,IAAMC,QAASN,GAC7D,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,SACrDxK,ICgBFyK,OAzBf,WACI,IAAM1K,EAASsI,aAAiD,SAAClF,GAAD,OAAWA,EAAMU,IAAI9D,UAErF,OACI,yBAAK6G,UAAU,OACX,kBAACkD,GAAD,MACA,kBAACY,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACpF,EAAA,EAAD,CAAYqF,KAAK,QAAQnF,MAAM,UAAUoF,aAAW,QAChD,kBAACC,GAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYzF,QAAQ,MAApB,QAGA,kBAAC4C,EAAA,EAAD,CAAQzC,MAAM,WAAd,UAEQ,YAAX3F,GAAwB,kBAACkL,GAAA,EAAD,OAE7B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,SC5BhBC,IAASC,OACL,kBAAC,IAAD,CAAUvH,MAAOA,GACjB,kBAAC,GAAD,OAEGwH,SAASC,eAAe,Sd+HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlJ,MAAK,SAAAmJ,GACJA,EAAaC,gBAEd/I,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM0B,a","file":"static/js/main.055ad5b7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TodolistType}>>>('todo-lists',\r\n            { title: title })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`,\r\n            { title: title })\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`,\r\n            { title: taskTitle })\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({ type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({ type: 'APP/SET-ERROR', error} as const)\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { Dispatch } from 'redux'\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppErrorAC > | ReturnType<typeof setAppStatusAC>>","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', domainModel, todolistId, taskId} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'SET-TASKS', todolistId, tasks} as const)\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType ) => ({type: 'CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n    dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\ntype ActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', title, todolistId} as const)\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo( ({title, changeTitle, disabled = false}: EditableSpanPropsType)  => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(props.todolist.id, 'all'), [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(props.todolist.id, 'active'), [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(props.todolist.id, \"completed\"), [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle} disabled={props.todolist.entityStatus === 'loading'} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks )\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList />\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}