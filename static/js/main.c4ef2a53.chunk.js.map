{"version":3,"sources":["serviceWorker.ts","common/enums/common-enums.ts","app/app-reducer.ts","common/actions/common-actions.ts","common/utils/handle-server-app-error.ts","common/utils/handle-server-network-error.ts","common/utils/create-app-async-thunk.ts","common/api/common-api.ts","features/TodolistsList/todolist-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/Auth/auth-api.ts","features/Auth/auth-reducer.ts","app/store.ts","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","app/app-selectors.ts","common/hooks/useAppDispatch.ts","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/auth-selectors.ts","features/TodolistsList/tasks-selector.ts","features/TodolistsList/todolists-selector.ts","features/TodolistsList/TodolistsList.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setIsInitializedAC","appReducer","reducer","appActions","actions","clearTasksAndTodolists","createAction","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","e","err","axios","isAxiosError","message","createAppAsyncThunk","createAsyncThunk","withTypes","instance","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","arg","put","taskId","model","ResultCode","fetchTodolists","_","thunkAPI","a","rejectWithValue","res","todolists","removeTodolist","todolistsActions","changeTodolistEntityStatusAC","entityStatus","resultCode","addTodolist","todolist","item","changeTodolistTitle","changeTodolistFilterAC","index","findIndex","tl","id","filter","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todolistsReducer","todolistsThunks","fetchTasks","tasks","items","addTask","task","updateTask","getState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","domainModel","removeTask","tasksActions","changeTaskEntityStatusAC","todoListId","forEach","tasksReducer","tasksThunks","authAPI","login","isLoggedIn","logout","initializeApp","authReducer","authThunks","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","trim","TextField","value","onChange","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","selectIsInitialized","selectStatus","selectError","useAppDispatch","useDispatch","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","Delete","Todolist","useEffect","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","selectIsLoggedIn","selectTasks","selectTodolists","TodolistsList","changeStatus","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c4ef2a53.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const ResultCode = {\r\n    Success: 0,\r\n    Error: 1,\r\n    Captcha: 10,\r\n} as const","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// state\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState,\r\n        reducers: {\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const clearTasksAndTodolists = createAction('common/clear-tasks-todolists')","import {appActions} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ResponseType } from '../types/common-types';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}","import {Dispatch} from \"redux\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (e: unknown, dispatch: Dispatch) => {\r\n    const err = e as Error | AxiosError<{ error: string }>\r\n    if (axios.isAxiosError(err)) {\r\n        const error = err.message ? err.message : 'Some error occurred'\r\n        dispatch(appActions.setAppErrorAC({error}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: `Native error ${err.message}`}))\r\n    }\r\n\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppStateType} from \"../../app/store\";\r\n\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: unknown\r\n}>()","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})","import {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport { instance } from '../../common/api';\r\nimport { ResponseType } from '../../common/types/common-types';\r\nimport {TaskPriorities, TaskStatuses} from \"../../common/enums\";\r\n\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(arg: UpdateTodolistTitleArgType) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${arg.todolistId}`,\r\n            {title: arg.title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(arg: AddTaskArgType) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${arg.todolistId}/tasks`, {title: arg.title})\r\n    },\r\n    deleteTask(arg: RemoveTaskArgType) {\r\n        return instance.delete<ResponseType>(`todo-lists/${arg.todolistId}/tasks/${arg.taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport type AddTaskArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type UpdateTodolistTitleArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type RemoveTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n}","import {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {createAppAsyncThunk} from \"../../common/utils\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {handleServerAppError} from \"../../common/utils\";\r\nimport {todolistAPI, TodolistType, UpdateTodolistTitleArgType} from \"./todolist-api\";\r\nimport { ResultCode } from \"../../common/enums\";\r\n\r\n\r\n//state\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodolistType[] }, void>\r\n('todolists/fetchTodolists', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.getTodolists()\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ todolistId: string }, string>\r\n('todolists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        dispatch(todolistsActions.changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTodolist = createAppAsyncThunk<{ todolist: TodolistType }, string>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitle = createAppAsyncThunk<UpdateTodolistTitleArgType, UpdateTodolistTitleArgType>\r\n('todolists/changeTodolistTitle', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.updateTodolist(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState,\r\n        reducers: {\r\n            changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                    return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n                })\r\n                .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    if (index > -1) {\r\n                        state.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(addTodolist.fulfilled, (state, action) => {\r\n                    state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n                })\r\n                .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    state[index].title = action.payload.title\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return []\r\n                })\r\n        }\r\n    }\r\n)\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsThunks = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsThunks} from \"./todolists-reducer\";\r\nimport {createAppAsyncThunk} from \"../../common/utils\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {handleServerAppError} from \"../../common/utils\";\r\nimport {AddTaskArgType, RemoveTaskArgType, TaskType, todolistAPI, UpdateTaskModelType} from \"./todolist-api\";\r\nimport {ResultCode, TaskPriorities, TaskStatuses} from \"../../common/enums\";\r\n\r\n\r\n// state\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>\r\n('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>\r\n('tasks/addTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.createTask(arg)\r\n        const task = res.data.data.item\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTaskArgType, UpdateTaskArgType>\r\n('tasks/updateTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n    try {\r\n        const tasksForCurrentTodolist = getState().tasks[arg.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === arg.taskId)\r\n        if (!task) {\r\n            dispatch(appActions.setAppErrorAC({error: 'Task not found in the state'}))\r\n            return rejectWithValue(null)\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...arg.domainModel\r\n        }\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTask = createAppAsyncThunk<RemoveTaskArgType, RemoveTaskArgType>\r\n('tasks/removeTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        dispatch(tasksActions.changeTaskEntityStatusAC({todolistId: arg.todolistId, taskId: arg.taskId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTask(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState,\r\n        reducers: {\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                    state[action.payload.todolistId] = action.payload.tasks\r\n                })\r\n                .addCase(addTask.fulfilled, (state, action) => {\r\n                    state[action.payload.task.todoListId].unshift(action.payload.task)\r\n                })\r\n                .addCase(updateTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                    }\r\n                })\r\n                .addCase(removeTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(todolistsThunks.addTodolist.fulfilled, (state, action) => {\r\n                    state[action.payload.todolist.id] = []\r\n                })\r\n                .addCase(todolistsThunks.removeTodolist.fulfilled, (state, action) => {\r\n                    delete state[action.payload.todolistId]\r\n                })\r\n                .addCase(todolistsThunks.fetchTodolists.fulfilled, (state, action) => {\r\n                    action.payload.todolists.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return {}\r\n                })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\nexport const tasksThunks = {fetchTasks, addTask, updateTask, removeTask}\r\n\r\nexport const tasksActions = slice.actions\r\n\r\n//types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype UpdateTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n    domainModel: UpdateDomainTaskModelType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"../../common/types/common-types\";\r\nimport {instance} from \"../../common/api\";\r\n\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {createAppAsyncThunk, handleServerAppError} from \"../../common/utils\";\r\nimport {handleServerNetworkError} from \"../../common/utils\";\r\nimport {authAPI, LoginParamsType} from \"./auth-api\";\r\nimport {ResultCode} from \"../../common/enums\";\r\n\r\n//state\r\n\r\nconst login = createAppAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType>\r\n('auth/login', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await authAPI.login(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst logout = createAppAsyncThunk<{ isLoggedIn: boolean }, void>\r\n('auth/logout', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(clearTasksAndTodolists())\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst initializeApp = createAppAsyncThunk<{ isLoggedIn: true }, void>\r\n('app/initializeApp', async (_, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n    }\r\n})\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(authThunks.login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.initializeApp.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authThunks = {login, logout, initializeApp}\r\n\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppStateType) => state.app.isInitialized\r\nexport const selectStatus = (state: AppStateType) => state.app.status\r\nexport const selectError = (state: AppStateType) => state.app.error","import { useDispatch } from 'react-redux';\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {appActions} from \"../../../app/app-reducer\";\r\nimport {selectError} from \"../../../app/app-selectors\";\r\nimport {useAppDispatch} from \"../../hooks\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector(selectError)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appActions.setAppErrorAC({error: null}))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../common/components\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses } from \"../../../../common/enums\";\r\nimport {TaskType} from \"../../todolist-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'} >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../common/components\";\r\nimport {EditableSpan} from \"../../../common/components\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {tasksThunks} from \"../tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../common/hooks\";\r\nimport {TaskStatuses} from \"../../../common/enums\";\r\nimport { TaskType } from '../todolist-api';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(tasksThunks.fetchTasks(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'all'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'active'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"),\r\n        [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectTasks = (state: AppStateType) => state.tasks","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectTodolists = (state: AppStateType) => state.todolists","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    FilterValuesType,\r\n    todolistsActions, todolistsThunks\r\n} from \"./todolists-reducer\";\r\nimport {tasksThunks} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../common/components\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../Auth/auth-selectors\";\r\nimport {selectTasks} from \"./tasks-selector\";\r\nimport {selectTodolists} from \"./todolists-selector\";\r\nimport {useAppDispatch} from \"../../common/hooks\";\r\nimport { TaskStatuses } from \"../../common/enums\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(todolistsThunks.fetchTodolists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(tasksThunks.removeTask({taskId, todolistId}));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(tasksThunks.addTask({todolistId, title}));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(tasksThunks.updateTask({todolistId, taskId: id, domainModel: {status}}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(tasksThunks.updateTask({todolistId, taskId: id, domainModel: {title: newTitle}}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        dispatch(todolistsActions.changeTodolistFilterAC({todolistId: todolistId, filter: value}));\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(todolistsThunks.removeTodolist(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(todolistsThunks.changeTodolistTitle({todolistId, title}));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(todolistsThunks.addTodolist(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {authThunks} from \"./auth-reducer\";\r\nimport {selectIsLoggedIn} from \"./auth-selectors\";\r\nimport {useAppDispatch} from \"../../common/hooks\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(authThunks.login(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../common/components\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {authThunks} from '../features/Auth/auth-reducer';\r\nimport {selectIsInitialized, selectStatus} from \"./app-selectors\";\r\nimport {selectIsLoggedIn} from \"../features/Auth/auth-selectors\";\r\nimport {useAppDispatch} from \"../common/hooks\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authThunks.initializeApp())\r\n    }, [])\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(authThunks.logout())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}