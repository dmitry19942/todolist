{"version":3,"sources":["features/todolists-list/todolists/Todolist/Tasks/Task/styles.module.css","serviceWorker.ts","common/enums/common-enums.ts","app/app-reducer.ts","common/actions/common-actions.ts","common/utils/create-app-async-thunk.ts","common/api/common-api.ts","features/todolists-list/todolists/todolist-api.ts","features/todolists-list/todolists/todolists-reducer.ts","features/todolists-list/tasks/tasks-api.ts","features/todolists-list/tasks/tasks-reducer.ts","features/auth/auth-api.ts","features/auth/auth-reducer.ts","app/store.ts","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","app/app-selectors.ts","common/hooks/useAppDispatch.ts","common/hooks/useActions.ts","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/auth/auth-selectors.ts","common/components/Header/Header.tsx","features/todolists-list/todolists/Todolist/FilterTasksButtons/FilterTasksButtons.tsx","features/todolists-list/todolists/Todolist/Tasks/Task/Task.tsx","features/todolists-list/todolists/Todolist/Tasks/Tasks.tsx","features/todolists-list/todolists/Todolist/TodolistTitle/TodolistTitle.tsx","features/todolists-list/todolists/Todolist/Todolist.tsx","features/todolists-list/tasks/tasks-selector.ts","features/todolists-list/todolists/todolists-selector.ts","features/todolists-list/TodolistsList.tsx","features/auth/Login.tsx","common/hooks/useLogin.ts","common/components/Routing/Routing.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppStatus","state","action","payload","setAppError","setIsInitialized","extraReducers","builder","addMatcher","type","endsWith","showGlobalError","data","messages","length","message","appReducer","reducer","appActions","actions","clearTasksAndTodolists","createAction","createAppAsyncThunk","createAsyncThunk","withTypes","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","arg","put","ResultCode","fetchTodolists","a","res","todolists","removeTodolist","dispatch","rejectWithValue","todolistsActions","changeTodolistEntityStatus","entityStatus","resultCode","addTodolist","todolist","item","changeTodolistTitle","changeTodolistFilter","index","findIndex","tl","id","filter","addCase","fulfilled","map","splice","unshift","todolistsReducer","todolistsThunks","tasksApi","taskId","model","fetchTasks","tasks","items","addTask","task","updateTask","thunkAPI","getState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","domainModel","removeTask","tasksActions","changeTaskEntityStatusAC","todoListId","forEach","tasksReducer","tasksThunks","authAPI","login","isLoggedIn","getCaptchaUrl","isShowAppError","fieldsErrors","logout","_","captcha","initializeApp","captchaUrl","url","authReducer","authThunks","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","then","catch","err","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","selectIsInitialized","selectStatus","selectError","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Alert","React","forwardRef","props","ref","elevation","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","selectIsLoggedIn","selectCaptcha","Header","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Button","LinearProgress","FilterTasksButtons","changeFilterHandler","Task","className","Completed","s","isDone","Checkbox","checked","New","Delete","Tasks","tasksForTodolist","TodolistTitle","Todolist","useEffect","unwrap","style","paddingTop","selectTasks","selectTodolists","TodolistsList","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","formikHelpers","fieldError","setFieldError","field","useLogin","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","handleChange","src","alt","isValid","dirty","Routing","Container","fixed","path","element","App","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.86a9551e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"styles_isDone__2f2Qf\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Later = 4\r\n}\r\n\r\nexport const ResultCode = {\r\n    Success: 0,\r\n    Error: 1,\r\n    Captcha: 10,\r\n} as const","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// state\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState,\r\n        reducers: {\r\n            setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addMatcher(\r\n                    action => action.type.endsWith('/pending'),\r\n                    state => {\r\n                        state.status = 'loading'\r\n                    })\r\n                .addMatcher(\r\n                    action => action.type.endsWith('/rejected'),\r\n                    (state, action) => {\r\n                        const {payload, error} = action\r\n                        if (payload) {\r\n                            if (payload.showGlobalError) {\r\n                                state.error = payload.data.messages.length ? payload.data.messages[0] : 'Some error occurred'\r\n                            }\r\n                        } else {\r\n                            state.error = error.message ? error.message : 'Some error occurred'\r\n                        }\r\n                        state.status = 'failed'\r\n                    }\r\n                )\r\n                .addMatcher(\r\n                    action => action.type.endsWith('/fulfilled'),\r\n                    state => {\r\n                        state.status = 'succeeded'\r\n                    }\r\n                )\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const clearTasksAndTodolists = createAction('common/clear-tasks-todolists')","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppStateType} from \"../../app/store\";\r\nimport {ResponseType} from \"../types\";\r\n\r\n/**\r\n Эта функция предназначена для того, чтобы избавиться от дублирования кода по созданию типов в санке\r\n */\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: null | RejectValueType\r\n}>()\r\n\r\nexport type RejectValueType = {\r\n    data: ResponseType\r\n    showGlobalError: boolean\r\n}","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})","import {AxiosResponse} from 'axios'\r\nimport { instance } from '../../../common/api';\r\nimport { ResponseType } from '../../../common/types';\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(arg: UpdateTodolistTitleArgType) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${arg.todolistId}`,\r\n            {title: arg.title})\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type UpdateTodolistTitleArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n","import {RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearTasksAndTodolists} from \"../../../common/actions\";\r\nimport {createAppAsyncThunk} from \"../../../common/utils\";\r\nimport {todolistAPI, TodolistType, UpdateTodolistTitleArgType} from \"./todolist-api\";\r\nimport { ResultCode } from \"../../../common/enums\";\r\n\r\n// state\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodolistType[] }, void>\r\n('todolists/fetchTodolists', async () => {\r\n        const res = await todolistAPI.getTodolists()\r\n        return {todolists: res.data}\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ todolistId: string }, string>\r\n('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n        dispatch(todolistsActions.changeTodolistEntityStatus({todolistId, entityStatus: 'loading'}))\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {todolistId}\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: true})\r\n        }\r\n})\r\n\r\nconst addTodolist = createAppAsyncThunk<{ todolist: TodolistType }, string>\r\n('todolists/addTodolist', async (title, {rejectWithValue}) => {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: false})\r\n        }\r\n})\r\n\r\nconst changeTodolistTitle = createAppAsyncThunk<UpdateTodolistTitleArgType, UpdateTodolistTitleArgType>\r\n('todolists/changeTodolistTitle', async (arg, {rejectWithValue}) => {\r\n        const res = await todolistAPI.updateTodolist(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: true})\r\n        }\r\n})\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState,\r\n        reducers: {\r\n            changeTodolistFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                    return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n                })\r\n                .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    if (index > -1) {\r\n                        state.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(addTodolist.fulfilled, (state, action) => {\r\n                    state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n                })\r\n                .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                    const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                    state[index].title = action.payload.title\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return []\r\n                })\r\n        }\r\n    }\r\n)\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsThunks = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {AxiosResponse} from 'axios'\r\nimport { instance } from '../../../common/api';\r\nimport { ResponseType } from '../../../common/types';\r\nimport {TaskPriorities, TaskStatuses} from \"../../../common/enums\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n// api\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(arg: AddTaskArgType) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${arg.todolistId}/tasks`, {title: arg.title})\r\n    },\r\n    deleteTask(arg: RemoveTaskArgType) {\r\n        return instance.delete<ResponseType>(`todo-lists/${arg.todolistId}/tasks/${arg.taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport type AddTaskArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type RemoveTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n}","import {appActions, RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsThunks} from \"../todolists/todolists-reducer\";\r\nimport {createAppAsyncThunk} from \"../../../common/utils\";\r\nimport {clearTasksAndTodolists} from \"../../../common/actions\";\r\nimport {ResultCode, TaskPriorities, TaskStatuses} from \"../../../common/enums\";\r\nimport {AddTaskArgType, RemoveTaskArgType, tasksApi, TaskType, UpdateTaskModelType} from \"./tasks-api\";\r\n\r\n// state\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>\r\n('tasks/fetchTasks', async (todolistId: string) => {\r\n        const res = await tasksApi.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId}\r\n})\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>\r\n('tasks/addTask', async (arg, {rejectWithValue}) => {\r\n        const res = await tasksApi.createTask(arg)\r\n        const task = res.data.data.item\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {task}\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: false})\r\n        }\r\n})\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTaskArgType, UpdateTaskArgType>\r\n('tasks/updateTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n        const tasksForCurrentTodolist = getState().tasks[arg.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === arg.taskId)\r\n        if (!task) {\r\n            dispatch(appActions.setAppError({error: 'Task not found in the state'}))\r\n            return rejectWithValue(null)\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...arg.domainModel\r\n        }\r\n        const res = await tasksApi.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: true})\r\n        }\r\n})\r\n\r\nconst removeTask = createAppAsyncThunk<RemoveTaskArgType, RemoveTaskArgType>\r\n('tasks/removeTask', async (arg, {dispatch, rejectWithValue}) => {\r\n        dispatch(tasksActions.changeTaskEntityStatusAC({todolistId: arg.todolistId, taskId: arg.taskId, entityStatus: 'loading'}))\r\n        const res = await tasksApi.deleteTask(arg)\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return arg\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: true})\r\n        }\r\n})\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState,\r\n        reducers: {\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder\r\n                .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                    state[action.payload.todolistId] = action.payload.tasks\r\n                })\r\n                .addCase(addTask.fulfilled, (state, action) => {\r\n                    state[action.payload.task.todoListId].unshift(action.payload.task)\r\n                })\r\n                .addCase(updateTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                    }\r\n                })\r\n                .addCase(removeTask.fulfilled, (state, action) => {\r\n                    const tasks = state[action.payload.todolistId]\r\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                    if (index !== -1) {\r\n                        tasks.splice(index, 1)\r\n                    }\r\n                })\r\n                .addCase(todolistsThunks.addTodolist.fulfilled, (state, action) => {\r\n                    state[action.payload.todolist.id] = []\r\n                })\r\n                .addCase(todolistsThunks.removeTodolist.fulfilled, (state, action) => {\r\n                    delete state[action.payload.todolistId]\r\n                })\r\n                .addCase(todolistsThunks.fetchTodolists.fulfilled, (state, action) => {\r\n                    action.payload.todolists.forEach((tl) => {\r\n                        state[tl.id] = []\r\n                    })\r\n                })\r\n                .addCase(clearTasksAndTodolists, () => {\r\n                    return {}\r\n                })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\nexport const tasksThunks = {fetchTasks, addTask, updateTask, removeTask}\r\n\r\nexport const tasksActions = slice.actions\r\n\r\n// types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype UpdateTaskArgType = {\r\n    todolistId: string\r\n    taskId: string\r\n    domainModel: UpdateDomainTaskModelType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"../../common/types\";\r\nimport {instance} from \"../../common/api\";\r\n\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    },\r\n    getCaptchaUrl() {\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string | null\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\nimport {clearTasksAndTodolists} from \"../../common/actions\";\r\nimport {createAppAsyncThunk} from \"../../common/utils\";\r\nimport {authAPI, LoginParamsType} from \"./auth-api\";\r\nimport {ResultCode} from \"../../common/enums\";\r\n\r\n// state\r\n\r\nconst login = createAppAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType>\r\n('auth/login', async (arg, {dispatch, rejectWithValue}) => {\r\n    const res = await authAPI.login(arg)\r\n    if (res.data.resultCode === ResultCode.Success) {\r\n        return {isLoggedIn: true}\r\n    } else {\r\n        if (res.data.resultCode === ResultCode.Captcha) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const isShowAppError = !res.data.fieldsErrors.length\r\n        return rejectWithValue({data: res.data, showGlobalError: isShowAppError})\r\n    }\r\n})\r\n\r\nconst logout = createAppAsyncThunk<{ isLoggedIn: boolean, captcha: null | string }, void>\r\n('auth/logout', async (_, {dispatch, rejectWithValue}) => {\r\n    const res = await authAPI.logout()\r\n    if (res.data.resultCode === ResultCode.Success) {\r\n        dispatch(clearTasksAndTodolists())\r\n        return {isLoggedIn: false, captcha: null}\r\n    } else {\r\n        return rejectWithValue({data: res.data, showGlobalError: true})\r\n    }\r\n})\r\n\r\nconst initializeApp = createAppAsyncThunk<{ isLoggedIn: true }, void>\r\n('app/initializeApp', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.Success) {\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            return rejectWithValue({data: res.data, showGlobalError: false})\r\n        }\r\n    } finally {\r\n        dispatch(appActions.setIsInitialized({isInitialized: true}))\r\n    }\r\n})\r\n\r\nconst getCaptchaUrl = createAppAsyncThunk<{ captcha: string }, void>\r\n('auth/getCaptchaUrl', async (_, {rejectWithValue}) => {\r\n    const res = await authAPI.getCaptchaUrl()\r\n    const captchaUrl = res.data.url\r\n    if (captchaUrl) {\r\n        return {captcha: captchaUrl}\r\n    } else {\r\n        return rejectWithValue({data: res.data, showGlobalError: true})\r\n    }\r\n})\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false,\r\n    captcha: null\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(authThunks.login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n                state.captcha = action.payload.captcha\r\n            })\r\n            .addCase(authThunks.initializeApp.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(authThunks.getCaptchaUrl.fulfilled, (state, action) => {\r\n                state.captcha = action.payload.captcha\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authThunks = {login, logout, initializeApp, getCaptchaUrl}\r\n\r\n// types\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n    captcha: null | string\r\n}\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/todolists-list/tasks/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/todolists-list/todolists/todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent, FC, memo} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {RejectValueType} from \"../../utils/create-app-async-thunk\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => Promise<any>\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: FC<PropsType> = memo(({addItem, disabled = false}) => {\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n                .then(() => {\r\n                    setTitle('')\r\n                })\r\n                .catch((err: RejectValueType) => {\r\n                    if (err.data) {\r\n                        const messages = err.data.messages\r\n                        setError(messages.length ? messages[0] : 'Some error occurred')\r\n                    }\r\n                })\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={!!error}\r\n                helperText={error}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addItemHandler}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent, FC, memo} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan: FC<PropsType> = memo(({title, changeTitle, disabled = false}) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppStateType) => state.app.isInitialized\r\nexport const selectStatus = (state: AppStateType) => state.app.status\r\nexport const selectError = (state: AppStateType) => state.app.error","import { useDispatch } from 'react-redux';\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch","import { useMemo } from 'react'\r\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux'\r\nimport {useAppDispatch} from \"./useAppDispatch\";\r\n\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(\r\n        () => bindActionCreators<T, RemapActionCreators<T>>(actions, dispatch),\r\n        [actions, dispatch]\r\n    )\r\n}\r\n\r\n// Types\r\ntype IsValidArg<T> = T extends object ? (keyof T extends never ? false : true) : true\r\ntype ActionCreatorResponse<T extends (...args: any[]) => any> = ReturnType<ReturnType<T>>\r\ntype ReplaceReturnType<T, TNewReturn> = T extends (a: infer A) => infer R\r\n    ? IsValidArg<A> extends true\r\n        ? (a: A) => TNewReturn\r\n        : () => TNewReturn\r\n    : never\r\ntype RemapActionCreators<T extends ActionCreatorsMapObject> = {\r\n    [K in keyof T]: ReplaceReturnType<T[K], ActionCreatorResponse<T[K]>>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {appActions} from \"../../../app/app-reducer\";\r\nimport {selectError} from \"../../../app/app-selectors\";\r\nimport {useActions} from \"../../hooks\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport const  ErrorSnackbar = () => {\r\n\r\n    const error = useSelector(selectError)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import {AppStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n","import Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectStatus} from \"../../../app/app-selectors\";\r\nimport {selectIsLoggedIn} from \"../../../features/auth/auth-selectors\";\r\nimport {useActions} from \"../../hooks\";\r\nimport {authThunks} from \"../../../features/auth/auth-reducer\";\r\n\r\nexport const Header = () => {\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authThunks)\r\n\r\n    const logoutHandler = () => logout({})\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    News\r\n                </Typography>\r\n                {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n        </AppBar>\r\n        )\r\n\r\n}\r\n\r\n","import React, {FC, memo} from 'react'\r\nimport Button from \"@mui/material/Button\";\r\nimport {FilterValuesType, TodolistDomainType, todolistsActions} from \"../../todolists-reducer\";\r\nimport {useActions} from \"../../../../../common/hooks\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\nexport const FilterTasksButtons: FC<PropsType> = memo(({todolist}) => {\r\n\r\n    const {changeTodolistFilter} = useActions(todolistsActions)\r\n\r\n    const changeFilterHandler = (filter: FilterValuesType) => {\r\n        changeTodolistFilter({todolistId: todolist.id, filter})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('all')}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('active')}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('completed')}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC, memo} from \"react\";\r\nimport {EditableSpan} from \"../../../../../../common/components\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses } from \"../../../../../../common/enums\";\r\nimport {TaskType} from \"../../../../tasks/tasks-api\";\r\nimport {useActions} from \"../../../../../../common/hooks\";\r\nimport {tasksThunks} from \"../../../../tasks/tasks-reducer\";\r\nimport s from './styles.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task: FC<PropsType> = memo (({task, todolistId}) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksThunks)\r\n\r\n    const removeTaskHandler = () => removeTask({taskId: task.id, todolistId})\r\n\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        updateTask({todolistId, taskId: task.id, domainModel: {status}}\r\n           );\r\n    }\r\n\r\n    const changeTitleHandler = (title: string) => {\r\n        updateTask({todolistId, taskId: task.id, domainModel: {title}});\r\n    }\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? s.isDone : \"\"}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={changeStatusHandler}\r\n            disabled={task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={task.title} changeTitle={changeTitleHandler} disabled={task.entityStatus === 'loading'} />\r\n        <IconButton onClick={removeTaskHandler} disabled={task.entityStatus === 'loading'} >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {FC, memo} from \"react\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses} from \"../../../../../common/enums\";\r\nimport {TaskType} from \"../../../tasks/tasks-api\";\r\nimport {TodolistDomainType} from \"../../todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n}\r\n\r\nexport const Tasks: FC<PropsType> = memo(({tasks, todolist}) => {\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <>{tasksForTodolist.map(t => <Task task={t} todolistId={todolist.id} key={t.id}/>)}</>\r\n    )\r\n})","import React, {FC, memo} from \"react\";\r\nimport {EditableSpan} from \"../../../../../common/components\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useActions} from \"../../../../../common/hooks\";\r\nimport {TodolistDomainType, todolistsThunks} from \"../../todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const TodolistTitle: FC<PropsType> = memo(({todolist}) => {\r\n\r\n    const {removeTodolist, changeTodolistTitle} = useActions(todolistsThunks)\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitleHandler = (title: string) => {\r\n        changeTodolistTitle({todolistId: todolist.id, title})\r\n    }\r\n\r\n    return (\r\n        <h3><EditableSpan title={todolist.title} changeTitle={changeTodolistTitleHandler}\r\n                          disabled={todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n    )\r\n})","import React, {FC, memo, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../../common/components\";\r\nimport {TodolistDomainType} from \"../todolists-reducer\";\r\nimport {tasksThunks} from \"../../tasks/tasks-reducer\";\r\nimport {useActions} from \"../../../../common/hooks\";\r\nimport { TaskType } from '../../tasks/tasks-api';\r\nimport {FilterTasksButtons} from \"./FilterTasksButtons/FilterTasksButtons\";\r\nimport {Tasks} from \"./Tasks/Tasks\";\r\nimport {TodolistTitle} from \"./TodolistTitle/TodolistTitle\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n}\r\n\r\nexport const Todolist: FC<PropsType> = memo(({todolist, tasks}) => {\r\n\r\n    const {fetchTasks, addTask} = useActions(tasksThunks)\r\n\r\n    useEffect(() => {\r\n        fetchTasks(todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = (title: string) => {\r\n        return  addTask({todolistId: todolist.id, title}).unwrap()\r\n    }\r\n\r\n    return <div>\r\n        <TodolistTitle todolist={todolist}/>\r\n        <AddItemForm addItem={addTaskCallback} disabled={todolist.entityStatus === 'loading'}/>\r\n        <Tasks todolist={todolist} tasks={tasks} />\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <FilterTasksButtons todolist={todolist} />\r\n        </div>\r\n    </div>\r\n})","import {AppStateType} from \"../../../app/store\";\r\n\r\nexport const selectTasks = (state: AppStateType) => state.tasks","import {AppStateType} from \"../../../app/store\";\r\n\r\nexport const selectTodolists = (state: AppStateType) => state.todolists","import React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {todolistsThunks} from \"./todolists/todolists-reducer\";\r\nimport {AddItemForm} from \"../../common/components\";\r\nimport {Todolist} from \"./todolists/Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../auth/auth-selectors\";\r\nimport {selectTasks} from \"./tasks/tasks-selector\";\r\nimport {selectTodolists} from \"./todolists/todolists-selector\";\r\nimport {useActions} from \"../../common/hooks\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {fetchTodolists, addTodolist} = useActions(todolistsThunks)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolists({})\r\n    }, [])\r\n\r\n    const addTodolistCallback = (title: string) => {\r\n        return addTodolist(title).unwrap()\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectCaptcha, selectIsLoggedIn} from \"./auth-selectors\";\r\nimport {useLogin} from \"../../common/hooks\";\r\n\r\nexport const Login = () => {\r\n\r\n    const {formik} = useLogin()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const captcha = useSelector(selectCaptcha)\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        {captcha !== null && <img src={captcha} alt=''/>}\r\n                        {captcha !== null && <TextField type=\"captcha\"\r\n                                                        label=\"Captcha\"\r\n                                                        margin=\"normal\"\r\n                                                        {...formik.getFieldProps('captcha')}\r\n                                                        onBlur={formik.handleBlur}\r\n                        />}\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                disabled={!(formik.isValid && formik.dirty)}\r\n                                color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import {useActions} from \"./useActions\";\r\nimport {authThunks} from \"../../features/auth/auth-reducer\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {LoginParamsType} from \"../../features/auth/auth-api\";\r\nimport {ResponseType} from \"../types\";\r\n\r\n\r\nexport const useLogin = () => {\r\n\r\n    const {login} = useActions(authThunks)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values: LoginParamsType, formikHelpers: FormikHelpers<LoginParamsType>) => {\r\n            login(values)\r\n                .unwrap()\r\n                .catch((reason: ResponseType) => {\r\n                    const {fieldsErrors} = reason\r\n                    if (fieldsErrors) {\r\n                        reason.fieldsErrors.forEach((fieldError) => {\r\n                            formikHelpers.setFieldError(fieldError.field, fieldError.error)\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    })\r\n\r\n    return {\r\n        formik,\r\n    }\r\n}","import {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {TodolistsList} from \"../../../features/todolists-list/TodolistsList\";\r\nimport {Login} from \"../../../features/auth/Login\";\r\nimport Container from \"@mui/material/Container\";\r\nimport React from \"react\";\r\n\r\nexport const Routing = () => {\r\n    return (\r\n        <Container fixed>\r\n            <Routes>\r\n                <Route path = '/' element = {<TodolistsList />} />\r\n                <Route path = '/todolist' element = {<TodolistsList />} />\r\n                <Route path = '/login' element = {<Login />} />\r\n                <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                <Route path = '*' element = {<Navigate to='/404'/> } />\r\n            </Routes>\r\n        </Container>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {ErrorSnackbar} from \"../common/components\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {authThunks} from '../features/auth/auth-reducer';\r\nimport {selectIsInitialized} from \"./app-selectors\";\r\nimport {useActions} from \"../common/hooks\";\r\nimport {Header} from \"../common/components\";\r\nimport {Routing} from \"../common/components\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n\r\n    const {initializeApp} = useActions(authThunks)\r\n\r\n    useEffect(() => {\r\n        initializeApp({})\r\n    }, [])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <Header />\r\n            <Routing />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}