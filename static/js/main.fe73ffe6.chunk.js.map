{"version":3,"sources":["serviceWorker.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","todolistId1","v1","todolistId2","initialState","id","title","filter","isDone","rootReducer","combineReducers","todolists","state","action","type","tl","todolistId","todolist","find","tasks","stateCopy","newTasks","t","taskId","newTask","todolistTasks","map","copyState","store","createStore","AddItemForm","React","memo","props","console","log","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","className","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","changeTodolistTitle","tasksForTodolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","style","paddingTop","Button","AppWithRedux","useSelector","dispatch","useDispatch","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistFilterAC","changeTodolistTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fe73ffe6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nconst initialState: Array<TodolistType> = [\r\n    {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}","import {TasksStateType} from '../App';\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from \"./todolists-reducer\";\r\nimport { TaskType } from '../Todolist';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ]\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t)\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todolistId }\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todolistId }\r\n}\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist is called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback ((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback (() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback (() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback (() => props.changeFilter(\"completed\", props.id), [props.id, props.changeFilter]);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, { useCallback } from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    console.log('App is called')\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>( state => state.todolists )\r\n    const tasks = useSelector<AppRootState, TasksStateType>( state => state.tasks )\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}