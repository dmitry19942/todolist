{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithReducers.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","style","listStyle","padding","tasks","map","t","className","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","margin","todolistId1","v1","todolistId2","initialState","todolistsReducer","state","action","type","tl","todolistId","todolist","find","tasksReducer","stateCopy","todolistTasks","taskId","task","AppWithReducers","useReducer","todolists","dispatchToTodolistsReducer","dispatchToTasksReducer","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","addTodolistAC","spacing","allTodolistTasks","tasksForTodolist","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c2e4f445.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodolistTitle(props.id, title)\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <IconButton\r\n                size={'small'}\r\n                onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '0'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n                    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={changeTaskStatus}\r\n                        />\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                        <IconButton\r\n                            size={'small'}\r\n                            onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                onClick={onAllClickHandler}\r\n            >All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                onClick={onActiveClickHandler}\r\n                style={{margin: '0 3px'}}\r\n            >Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nconst initialState: Array<TodolistType> = [\r\n    {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}","import {TasksStateType} from '../App';\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ]\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}\r\n            const todolistTasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = todolistTasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const todolistTasks = stateCopy[action.todolistId]\r\n            const task = {id: v1(), title: action.title, isDone: false}\r\n            stateCopy[action.todolistId] = [task, ...todolistTasks]\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state}\r\n            const todolistTasks = stateCopy[action.todolistId]\r\n            const task = todolistTasks.find(t => t.id === action.taskId)\r\n            if (task){\r\n                task.isDone = action.isDone\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state}\r\n            const todolistTasks = stateCopy[action.todolistId]\r\n            const task = todolistTasks.find(t => t.id === action.taskId)\r\n            if (task){\r\n                task.title = action.title\r\n            }\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todolistId }\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todolistId }\r\n}\r\n\r\n\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./store/tasks-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithReducers() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, dispatchToTodolistsReducer] = useReducer(todolistsReducer, [\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, dispatchToTasksReducer] = useReducer(tasksReducer, {\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatchToTasksReducer(action)\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatchToTasksReducer(action)\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatchToTasksReducer(action)\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatchToTasksReducer(action)\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatchToTodolistsReducer(action)\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id)\r\n        dispatchToTasksReducer(action)\r\n        dispatchToTodolistsReducer(action)\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatchToTodolistsReducer(action)\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title)\r\n        dispatchToTasksReducer(action)\r\n        dispatchToTodolistsReducer(action)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\n\r\nReactDOM.render(<AppWithReducers />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}