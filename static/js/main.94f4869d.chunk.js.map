{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","utils/create-app-async-thunk.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","arg","taskId","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","appActions","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","e","err","isAxiosError","message","slice","createSlice","name","initialState","reducers","removeTodolistAC","state","action","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","clearTodolistDataAC","todolistsReducer","reducer","todolistsActions","actions","isLoggedIn","setIsLoggedInAC","value","authReducer","authActions","isInitialized","setIsInitializedAC","appReducer","createAppAsyncThunk","createAsyncThunk","withTypes","fetchTasks","thunkAPI","a","rejectWithValue","res","tasks","items","addTask","task","item","resultCode","removeTaskAC","t","updateTaskAC","domainModel","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","fulfilled","todoListId","tasksReducer","tasksActions","tasksThunks","updateTaskTC","getState","find","apiModel","startDate","priority","description","deadline","then","catch","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useDispatch","useSelector","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","trim","TextField","onChange","currentTarget","onKeyPress","key","size","helperText","label","variant","IconButton","onClick","color","AddBox","EditableSpan","changeTitle","editMode","setEditMode","newTitle","setNewTitle","offEditMode","onBlur","autoFocus","onDoubleClick","Task","props","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useEffect","todos","removeTaskTC","changeStatus","removeTodolistTC","updateTitleTodolistTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICFMC,EAMAC,E,6EANAD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,kBAAAA,M,KAiDZ,IAAMC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIRE,GACX,OAAOR,EAASS,KAA6E,aACzF,CAACD,MAAOA,KANPF,EAAc,SAQRI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAT9CJ,EAAc,SAWRI,EAAoBF,GAC/B,OAAOR,EAASY,IAAT,qBAA2EF,GAC9E,CAACF,MAAOA,KAbPF,EAAc,SAefI,GACJ,OAAOV,EAASO,IAAT,qBAAiDG,EAAjD,YAhBFJ,EAAc,SAkBZO,GACP,OAAOb,EAASS,KAAT,qBACWI,EAAIH,WADf,UACmC,CAACF,MAAOK,EAAIL,SApBjDF,EAAc,SAsBZI,EAAoBI,GAC3B,OAAOd,EAASW,OAAT,qBAA4CD,EAA5C,kBAAgEI,KAvBlER,EAAc,SAyBZI,EAAoBI,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBACWF,EADX,kBAC+BI,GAAUC,IAI3CC,EAAU,SACbC,GACF,OAAOjB,EAASS,KACZ,aAAcQ,IAHbD,EAAU,WAMf,OAAOhB,EAASW,OAAqB,eANhCK,EAAU,WASf,OAAOhB,EAASO,IAAiC,YClH5CW,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASG,EAAWC,cAAc,CAACC,MAAON,EAAKE,SAAS,MAExDD,EAASG,EAAWC,cAAc,CAACC,MAAO,yBAE9CL,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAGnCC,EAA2B,SAACC,EAAYT,GACjD,IAAMU,EAAMD,EACZ,GAAI5B,IAAM8B,aAAaD,GAAM,CACzB,IAAML,EAAQK,EAAIE,QAAUF,EAAIE,QAAU,sBAC1CZ,EAASG,EAAWC,cAAc,CAACC,gBAEnCL,EAASG,EAAWC,cAAc,CAACC,MAAM,gBAAD,OAAkBK,EAAIE,YAGlEZ,EAASG,EAAWG,eAAe,CAACC,OAAQ,a,QCP1CM,EAAQC,YAAY,CAClBC,KAAM,YACNC,aAJwC,GAKxCC,SAAU,CACNC,iBADM,SACWC,EAAOC,GACpB,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOvB,QAAQP,cACzD+B,GAAS,GACTF,EAAMM,OAAOJ,EAAO,IAG5BK,cAPM,SAOQP,EAAOC,GACjBD,EAAMQ,QAAN,2BAAkBP,EAAOvB,QAAQ+B,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE5EC,sBAVM,SAUgBZ,EAAOC,GACzB,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOvB,QAAQP,cAC7D6B,EAAME,GAAOjC,MAAQgC,EAAOvB,QAAQT,OAExC4C,uBAdM,SAciBb,EAAOC,GAC1B,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOvB,QAAQP,cAC7D6B,EAAME,GAAOQ,OAAST,EAAOvB,QAAQgC,QAEzCI,eAlBM,SAkBSd,EAAOC,GAClB,OAAOA,EAAOvB,QAAQqC,UAAUC,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaM,OAAQ,MAAOC,aAAc,aAEpFM,6BArBM,SAqBuBjB,EAAOC,GAChC,IAAMC,EAAQF,EAAMG,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAOvB,QAAQP,cAC7D6B,EAAME,GAAOS,aAAeV,EAAOvB,QAAQiC,cAE/CO,oBAzBM,WA0BF,MAAO,OAKVC,EAAmBzB,EAAM0B,QAEzBC,EAAmB3B,EAAM4B,QCzChC5B,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjB0B,YAAY,GAMZzB,SAAU,CACN0B,gBADM,SACUxB,EAAOC,GACnBD,EAAMuB,WAAatB,EAAOvB,QAAQ+C,UAKjCC,EAAchC,EAAM0B,QACpBO,EAAcjC,EAAM4B,QCF3B5B,EAAQC,YAAY,CAClBC,KAAM,MACNC,aAR+B,CACnCT,OAAQ,OACRF,MAAO,KACP0C,eAAe,GAMX9B,SAAU,CACNX,eADM,SACSa,EAAOC,GAClBD,EAAMZ,OAASa,EAAOvB,QAAQU,QAElCH,cAJM,SAIQe,EAAOC,GACjBD,EAAMd,MAAQe,EAAOvB,QAAQQ,OAEjC2C,mBAPM,SAOa7B,EAAOC,GACtBD,EAAM4B,cAAgB3B,EAAOvB,QAAQkD,kBAMxCE,EAAapC,EAAM0B,QAEnBpC,EAAaU,EAAM4B,QCrCnBS,EAAsBC,IAAiBC,YC4B9CC,EAAaH,EAClB,mBADqC,uCACjB,WAAO5D,EAAoBgE,GAA3B,qBAAAC,EAAA,6DACVvD,EAA6BsD,EAA7BtD,SAAUwD,EAAmBF,EAAnBE,gBADA,SAGbxD,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAH/B,SAIKrB,EAAoBI,GAJzB,cAIPmE,EAJO,OAKPC,EAAQD,EAAI1D,KAAK4D,MACvB3D,EAASG,EAAWG,eAAe,CAACC,OAAQ,eAN/B,kBAON,CAACmD,QAAOpE,eAPF,yCASbkB,EAAyB,EAAD,GAAIR,GATf,kBAUNwD,EAAgB,OAVV,0DADiB,yDAehCI,EAAUV,EACf,gBADkC,uCACjB,WAAOzD,EAAK6D,GAAZ,qBAAAC,EAAA,6DACPvD,EAA6BsD,EAA7BtD,SAAUwD,EAAmBF,EAAnBE,gBADH,SAGVxD,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAHlC,SAIQrB,EAAuBO,GAJ/B,UAIJgE,EAJI,OAKJI,EAAOJ,EAAI1D,KAAKA,KAAK+D,KACC,IAAxBL,EAAI1D,KAAKgE,WANH,wBAON/D,EAASG,EAAWG,eAAe,CAACC,OAAQ,eAPtC,kBAQC,CAACsD,SARF,eAUN/D,EAAqB2D,EAAI1D,KAAMC,GAVzB,kBAWCwD,EAAgB,OAXjB,iEAcVhD,EAAyB,EAAD,GAAIR,GAdlB,kBAeHwD,EAAgB,OAfb,0DADiB,yDAoB7B3C,EAAQC,YAAY,CAClBC,KAAM,QACNC,aAvC6B,GAwC7BC,SAAU,CACN+C,aADM,SACO7C,EAAOC,GAChB,IAAMsC,EAAQvC,EAAMC,EAAOvB,QAAQP,YAC7B+B,EAAQqC,EAAMpC,WAAU,SAAA2C,GAAC,OAAIA,EAAEzC,KAAOJ,EAAOvB,QAAQH,UACvD2B,GAAS,GACTqC,EAAMjC,OAAOJ,EAAO,IAG5B6C,aARM,SAQO/C,EAAOC,GAChB,IAAMsC,EAAQvC,EAAMC,EAAOvB,QAAQP,YAC7B+B,EAAQqC,EAAMpC,WAAU,SAAA2C,GAAC,OAAIA,EAAEzC,KAAOJ,EAAOvB,QAAQH,UACvD2B,GAAS,IACTqC,EAAMrC,GAAN,2BAAmBqC,EAAMrC,IAAWD,EAAOvB,QAAQsE,eAG3DC,yBAfM,SAemBjD,EAAOC,GAC5B,IAAMsC,EAAQvC,EAAMC,EAAOvB,QAAQP,YAC7B+B,EAAQqC,EAAMpC,WAAU,SAAA2C,GAAC,OAAIA,EAAEzC,KAAOJ,EAAOvB,QAAQH,UACvD2B,GAAS,IACTqC,EAAMrC,GAAN,2BAAmBqC,EAAMrC,IAAzB,IAAiCS,aAAcV,EAAOvB,QAAQiC,kBAI1EuC,cAAe,SAACC,GACZA,EAAQC,QAAQ/B,EAAiBd,eAAe,SAACP,EAAOC,GACpDD,EAAMC,EAAOvB,QAAQ+B,SAASJ,IAAM,MAExC8C,EAAQC,QAAQ/B,EAAiBtB,kBAAkB,SAACC,EAAOC,UAChDD,EAAMC,EAAOvB,QAAQP,eAEhCgF,EAAQC,QAAQ/B,EAAiBP,gBAAgB,SAACd,EAAOC,GACrDA,EAAOvB,QAAQqC,UAAUsC,SAAQ,SAACjD,GAC9BJ,EAAMI,EAAGC,IAAM,SAGvB8C,EAAQC,QAAQ/B,EAAiBH,qBAAqB,WAClD,MAAO,MAEXiC,EAAQC,QAAQlB,EAAWoB,WAAW,SAACtD,EAAOC,GAC1CD,EAAMC,EAAOvB,QAAQP,YAAc8B,EAAOvB,QAAQ6D,SAEtDY,EAAQC,QAAQX,EAAQa,WAAW,SAACtD,EAAOC,GACvCD,EAAMC,EAAOvB,QAAQgE,KAAKa,YAAY/C,QAAQP,EAAOvB,QAAQgE,YAMhEc,EAAe9D,EAAM0B,QAErBqC,EAAe/D,EAAM4B,QAErBoC,EAAc,CAACxB,aAAYO,WA8C3BkB,EAAe,SAACpF,EAAgBJ,EAAoB6E,GAArC,OAA0F,SAACnE,EAAuB+E,GAC1I,IAEMlB,EAFoBkB,IAAWrB,MACapE,GACb0F,MAAK,SAAAf,GAAC,OAAIA,EAAEzC,KAAO9B,KACxD,GAAKmE,EAAL,CAIA,IAAMoB,EAA6B,aAC/B7F,MAAOyE,EAAKzE,MACZ8F,UAAWrB,EAAKqB,UAChBC,SAAUtB,EAAKsB,SACfC,YAAavB,EAAKuB,YAClBC,SAAUxB,EAAKwB,SACf9E,OAAQsD,EAAKtD,QACV4D,GAEPnE,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAAuBI,EAAYI,EAAQuF,GACtCK,MAAK,SAAA7B,GAC0B,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAAS4E,EAAaV,aAAa,CAACxE,SAAQyE,cAAa7E,gBACzDU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,WAvBpCwF,QAAQC,KAAK,iC,SClKfC,EAAcC,YAAgB,CAChCzD,UAAWI,EACXoB,MAAOiB,EACPiB,IAAK3C,EACL4C,KAAMhD,IAGGiD,EAAQC,YAAe,CAChCxD,QAASmD,EACTM,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,QAAQC,QAUxBC,IAGiBC,IAGlE/H,OAAOwH,MAAQA,E,gDCzBFQ,GAAcC,IAAMC,MAAK,YAAwD,IAAtDC,EAAqD,EAArDA,QAAqD,IAA5CC,gBAA4C,SACzF,EAAsCC,mBAAiB,IAAvD,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,oBAAkB,GAA1C,mBAAKtG,EAAL,KAAYyG,EAAZ,KAOMlD,EAAU,WACgB,KAAxBgD,EAAaG,OACbN,EAAQG,EAAaG,QAErBD,GAAS,GAEbD,EAAgB,KASpB,OACI,6BACI,kBAACG,EAAA,EAAD,CACIpE,MAAOgE,EACPK,SAxBY,SAACxG,GACrBqG,GAAS,GACTD,EAAgBpG,EAAEyG,cAActE,QAuBxBuE,WAXc,SAAC1G,GACT,UAAVA,EAAE2G,KACFxD,KAUI8C,SAAUA,EACVW,KAAM,QACNhH,MAAOA,EACPiH,WAAYjH,GAAS,qBACrBkH,MAAO,QACPC,QAAS,aAEb,kBAACC,GAAA,EAAD,CACIC,QAAS9D,EACT+D,MAAO,UACPjB,SAAUA,GAEV,kBAACkB,GAAA,EAAD,WC3CHC,GAAetB,IAAMC,MAAK,YAAoE,IAAlEpH,EAAiE,EAAjEA,MAAO0I,EAA0D,EAA1DA,YAA0D,IAA7CpB,gBAA6C,SACtG,EAA8BC,oBAAkB,GAAhD,mBAAKoB,EAAL,KAAeC,EAAf,KACA,EAA8BrB,mBAAiBvH,GAA/C,mBAAK6I,EAAL,KAAeC,EAAf,KAWMC,EAAc,WAChBH,GAAY,GACZF,EAAYG,IAShB,OACIF,EACM,kBAACf,EAAA,EAAD,CACEC,SAvBe,SAACxG,GACxByH,EAAYzH,EAAEyG,cAActE,QAuBpBA,MAAOqF,EACPG,OAAQD,EACRE,WAAS,EACTlB,WAbkB,SAAC1G,GACb,UAAVA,EAAE2G,KACFe,OAaE,0BAAMG,cA1BG,WACX5B,GAGJsB,GAAY,KAsB4B5I,M,oBC3BnCmJ,GAAOhC,IAAMC,MAAM,SAACgC,GAC7B,IAMMC,EAAuBC,uBAAa,SAACC,GACvCH,EAAMI,gBAAgBJ,EAAM3E,KAAKrC,GAAImH,EAAUH,EAAMlJ,cACtD,CAACkJ,EAAM3E,KAAKrC,GAAIgH,EAAMI,gBAAiBJ,EAAMlJ,aAEhD,OAAO,yBAAK8H,IAAKoB,EAAM3E,KAAKrC,GAAIqH,UAAWL,EAAM3E,KAAKtD,SAAW7B,EAAaoK,UAAY,UAAY,IAClG,kBAACC,GAAA,EAAD,CACIC,QAASR,EAAM3E,KAAKtD,SAAW7B,EAAaoK,UAC5CnB,MAAM,UACNV,SAbgB,SAACxG,GACrB,IAAIwI,EAAiBxI,EAAEyG,cAAc8B,QACrCR,EAAMU,iBAAiBV,EAAM3E,KAAKrC,GAAIyH,EAAiBvK,EAAaoK,UAAYpK,EAAayK,IACzFX,EAAMlJ,aAWNoH,SAAsC,YAA5B8B,EAAM3E,KAAK/B,eAEzB,kBAAC+F,GAAD,CAAczI,MAAOoJ,EAAM3E,KAAKzE,MAAO0I,YAAaW,EAAsB/B,SAAsC,YAA5B8B,EAAM3E,KAAK/B,eAC/F,kBAAC2F,GAAA,EAAD,CAAYC,QAlBO,kBAAMc,EAAMY,WAAWZ,EAAM3E,KAAKrC,GAAIgH,EAAMlJ,aAkB1BoH,SAAsC,YAA5B8B,EAAM3E,KAAK/B,cACtD,kBAACuH,GAAA,EAAD,W,UCbCC,GAAW/C,IAAMC,MAAK,SAAUgC,GAEzC,IAAM5E,EAAU8E,uBAAY,SAACtJ,GACzBoJ,EAAM5E,QAAQxE,EAAOoJ,EAAM5G,SAASJ,MACrC,CAACgH,EAAM5E,QAAS4E,EAAM5G,SAASJ,KAM5B+H,EAAsBb,uBAAY,SAACtJ,GACrCoJ,EAAMe,oBAAoBf,EAAM5G,SAASJ,GAAIpC,KAC9C,CAACoJ,EAAMe,oBAAqBf,EAAM5G,SAASJ,KAExCgI,EAAoBd,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAM5G,SAASJ,GAAI,SAC9E,CAACgH,EAAM5G,SAASJ,GAAIgH,EAAMiB,eACxBC,EAAuBhB,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAM5G,SAASJ,GAAI,YACjF,CAACgH,EAAM5G,SAASJ,GAAIgH,EAAMiB,eACxBE,EAA0BjB,uBAAY,kBAAMF,EAAMiB,aAAajB,EAAM5G,SAASJ,GAAI,eACpF,CAACgH,EAAM5G,SAASJ,GAAIgH,EAAMiB,eAE1BG,EAAmBpB,EAAM9E,MAQ7B,MAP8B,WAA1B8E,EAAM5G,SAASC,SACf+H,EAAmBpB,EAAM9E,MAAM7B,QAAO,SAAAoC,GAAC,OAAIA,EAAE1D,SAAW7B,EAAayK,QAE3C,cAA1BX,EAAM5G,SAASC,SACf+H,EAAmBpB,EAAM9E,MAAM7B,QAAO,SAAAoC,GAAC,OAAIA,EAAE1D,SAAW7B,EAAaoK,cAGlE,6BACH,4BAAI,kBAACjB,GAAD,CAAczI,MAAOoJ,EAAM5G,SAASxC,MAAO0I,YAAayB,EAC1C7C,SAA0C,YAAhC8B,EAAM5G,SAASE,eACvC,kBAAC2F,GAAA,EAAD,CAAYC,QA1BG,WACnBc,EAAMqB,eAAerB,EAAM5G,SAASJ,KAyBKkF,SAA0C,YAAhC8B,EAAM5G,SAASE,cAC1D,kBAACuH,GAAA,EAAD,QAGR,kBAAC/C,GAAD,CAAaG,QAAS7C,EAAS8C,SAA0C,YAAhC8B,EAAM5G,SAASE,eACxD,6BAEQ8H,EAAiBzH,KAAI,SAAA8B,GAAC,OAAI,kBAACsE,GAAD,CACtB1E,KAAMI,EACN2E,gBAAiBJ,EAAMI,gBACvBM,iBAAkBV,EAAMU,iBACxBE,WAAYZ,EAAMY,WAClB9J,WAAYkJ,EAAM5G,SAASJ,GAC3B4F,IAAKnD,EAAEzC,SAInB,yBAAKsI,MAAO,CAACC,WAAY,SACrB,kBAACC,GAAA,EAAD,CAAQxC,QAAmC,QAA1BgB,EAAM5G,SAASC,OAAmB,WAAa,OACxD6F,QAAS8B,EACT7B,MAAO,WAFf,OAKA,kBAACqC,GAAA,EAAD,CAAQxC,QAAmC,WAA1BgB,EAAM5G,SAASC,OAAsB,WAAa,OAC3D6F,QAASgC,EACT/B,MAAO,WAFf,UAIA,kBAACqC,GAAA,EAAD,CAAQxC,QAAmC,cAA1BgB,EAAM5G,SAASC,OAAyB,WAAa,OAC9D6F,QAASiC,EACThC,MAAO,aAFf,kB,6BC/DCsC,GAA0B,WAEnC,IAAM/H,EAAYmE,aAAqD,SAAAlF,GAAK,OAAIA,EAAMe,aAChFwB,EAAQ2C,aAA0C,SAAAlF,GAAK,OAAIA,EAAMuC,SACjEhB,EAAa2D,aAAmC,SAAAlF,GAAK,OAAIA,EAAM0E,KAAKnD,cAEpE1C,EAAWoG,cAEjB8D,qBAAU,WACDxH,GAGL1C,GV0BwC,SAACA,GAC7CA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,IACKoG,MAAK,SAAC7B,GAGH,OAFAzD,EAASwC,EAAiBP,eAAe,CAACC,UAAWuB,EAAI1D,QACzDC,EAASG,EAAWG,eAAe,CAACC,OAAQ,eACrCkD,EAAI1D,QAEduF,MAAK,SAAC6E,GACHA,EAAM3F,SAAQ,SAACjD,GACXvB,EAAS6E,EAAYxB,WAAW9B,EAAGC,WAG1C+D,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,WUvCrC,IAEH,IAAMoJ,EAAaV,uBAAY,SAAClH,EAAYlC,GACxCU,ENsGoB,SAACV,EAAoBI,GAArB,OAAkD,SAACM,GAC3EA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CP,EAAS4E,EAAaR,yBAAyB,CAAC9E,aAAYI,SAAQoC,aAAc,aAClF5C,EAAuBI,EAAYI,GAC9B4F,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAAS4E,EAAaZ,aAAa,CAACtE,SAAQJ,gBAC5CU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,OMnH3BoK,CAAa9K,EAAYkC,MACnC,IAEGoC,EAAU8E,uBAAY,SAACtJ,EAAeE,GACxCU,EAAS6E,EAAYjB,QAAQ,CAACtE,aAAYF,aAC3C,IAEGiL,EAAe3B,uBAAY,SAAClH,EAAYjB,EAAsBjB,GAChEU,EAAS8E,EAAatD,EAAIlC,EAAY,CAACiB,cACxC,IAEGqI,EAAkBF,uBAAY,SAAClH,EAAYyG,EAAkB3I,GAC/DU,EAAS8E,EAAatD,EAAIlC,EAAY,CAACF,MAAO6I,OAC/C,IAEGwB,EAAef,uBAAY,SAACpJ,EAAoBsD,GAClD,IAAMxB,EAASoB,EAAiBR,uBAAuB,CAAC1C,WAAYA,EAAYuC,OAAQe,IACxF5C,EAASoB,KACV,IAEGyI,EAAiBnB,uBAAY,SAACpJ,GAChCU,EVkBwB,SAACV,GAAD,OAAkC,SAACU,GAC/DA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CP,EAASwC,EAAiBJ,6BAA6B,CAAC9C,WAAYA,EAAYwC,aAAc,aAC9F5C,EAA2BI,GACtBgG,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAASwC,EAAiBtB,iBAAiB,CAAC5B,WAAYA,KACxDU,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,OU/B3BsK,CAAiBhL,MAC3B,IAEGiK,EAAsBb,uBAAY,SAACpJ,EAAoBF,GACzDY,EV6C6B,SAACV,EAAoBF,GAArB,OACjC,SAACY,GACDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAA2BI,EAAYF,GAClCkG,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAASwC,EAAiBT,sBAAsB,CAACzC,WAAYA,EAAYF,MAAOA,KAChFY,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,OU1D3BuK,CAAsBjL,EAAYF,MAC5C,IAEGoL,EAAc9B,uBAAY,SAACtJ,GAC7BY,EV0BqB,SAACZ,GAAD,OAA6B,SAACY,GACvDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CrB,EAA2BE,GACtBkG,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAASwC,EAAiBd,cAAc,CAACE,SAAU6B,EAAI1D,KAAKA,KAAK+D,QACjE9D,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,OUtC3ByK,CAAcrL,MACxB,IAEH,OAAKsD,EAGE,oCACH,kBAACgI,GAAA,EAAD,CAAMC,WAAS,EAACb,MAAO,CAACc,QAAS,SAC7B,kBAACtE,GAAD,CAAaG,QAAS+D,KAE1B,kBAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjB3I,EAAUC,KAAI,SAAAZ,GACV,IAAIuJ,EAAmBpH,EAAMnC,EAAGC,IAEhC,OAAO,kBAACkJ,GAAA,EAAD,CAAM5G,MAAI,EAACsD,IAAK7F,EAAGC,IACtB,kBAACuJ,GAAA,EAAD,CAAOjB,MAAO,CAACc,QAAS,SACpB,kBAACtB,GAAD,CACI1H,SAAUL,EACVmC,MAAOoH,EACP1B,WAAYA,EACZK,aAAcA,EACd7F,QAASA,EACTsF,iBAAkBmB,EAClBR,eAAgBA,EAChBjB,gBAAiBA,EACjBW,oBAAqBA,WAtBtC,kBAAC,KAAD,CAAUyB,GAAI,Y,gFC5DvBC,GAAQ1E,IAAM2E,YAAuC,SACvD1C,EAAO2C,GACP,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAK3D,QAAQ,UAAagB,OAG3D,SAAS6C,KAEZ,IAAMhL,EAAQgG,aAAyC,SAAClF,GAAD,OAAWA,EAAMyE,IAAIvF,SACtEL,EAAWoG,cAEXkF,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJxL,EAASG,EAAWC,cAAc,CAACC,MAAO,SAE9C,OACI,kBAACoL,GAAA,EAAD,CAAUC,KAAgB,OAAVrL,EAAgBsL,iBAAkB,IAAMC,QAASN,GAC7D,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,SACrD1L,I,sDCLJ2L,GAAQ,WAEjB,IAAMhM,EAAWoG,cACX1D,EAAa2D,aAAmC,SAAAlF,GAAK,OAAIA,EAAM0E,KAAKnD,cAEpEuJ,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAASnM,OAAS,IAChCuM,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GXpBK,IAAC3M,EWqBZG,GXrBYH,EWqBK2M,EXrBwB,SAACxM,GAClDA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CX,EAAcC,GACTyF,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAAS8C,EAAYH,gBAAgB,CAACC,OAAO,KAC7C5C,EAASG,EAAWG,eAAe,CAACC,OAAQ,gBAE5CT,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,SWUhCiM,EAAOW,eAIf,OAAIlK,EACO,kBAAC,KAAD,CAAUsI,GAAI,MAGlB,kBAACN,GAAA,EAAD,CAAMC,WAAS,EAACkC,eAAgB,UACnC,kBAACnC,GAAA,EAAD,CAAM5G,MAAI,EAAC+I,eAAgB,UACvB,0BAAMF,SAAUV,EAAOa,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,UADX,UAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACnG,EAAA,EAAD,eAAWO,MAAM,QACN6F,OAAO,UACHnB,EAAOoB,cAAc,SAFpC,CAGWjF,OAAQ6D,EAAOqB,cAEzBrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOL,MACnC,yBAAKtC,MAAO,CAACnC,MAAO,QAASsE,EAAOQ,OAAOL,OAAe,KAC9D,kBAACpF,EAAA,EAAD,eAAWwG,KAAK,WACLjG,MAAM,WACN6F,OAAO,UACHnB,EAAOoB,cAAc,YAHpC,CAIWjF,OAAQ6D,EAAOqB,cAEzBrB,EAAOsB,QAAQlB,UAAYJ,EAAOQ,OAAOJ,SACtC,yBAAKvC,MAAO,CAACnC,MAAO,QAASsE,EAAOQ,OAAOJ,UAAkB,KACjE,kBAACoB,GAAA,EAAD,CAAkBlG,MAAO,cACPmG,QAAS,kBAAC3E,GAAA,EAAD,CAAU9B,SAAUgF,EAAO0B,aACjB3E,QAASiD,EAAOO,OAAOF,WACvBvL,KAAK,iBAE1C,kBAACiJ,GAAA,EAAD,CAAQwD,KAAM,SAAUhG,QAAS,YAAaG,MAAO,WAArD,e,UCpBTiG,OAnDf,WACI,IAAM5N,EAAWoG,cAEjB8D,qBAAU,WACNlK,GXkBuC,SAACA,GAC5CJ,IAAa0F,MAAK,SAAC7B,GACfzD,EAASG,EAAW6C,mBAAmB,CAACD,eAAe,KAC3B,IAAxBU,EAAI1D,KAAKgE,WACT/D,EAAS8C,EAAYH,gBAAgB,CAACC,OAAO,KAE7C9C,EAAqB2D,EAAI1D,KAAMC,MAGlCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,WW3BrC,IAEH,IAAMO,EAAS8F,aAA6C,SAAClF,GAAD,OAAWA,EAAMyE,IAAIrF,UAC3EwC,EAAgBsD,aAAmC,SAAAlF,GAAK,OAAIA,EAAMyE,IAAI7C,iBACtEL,EAAa2D,aAAmC,SAAAlF,GAAK,OAAIA,EAAM0E,KAAKnD,cAEpEmL,EAAgBnF,uBAAY,WAC9B1I,GZUsB,SAACA,GAC3BA,EAASG,EAAWG,eAAe,CAACC,OAAQ,aAC5CX,IACK0F,MAAK,SAAC7B,GACyB,IAAxBA,EAAI1D,KAAKgE,YACT/D,EAAS8C,EAAYH,gBAAgB,CAACC,OAAO,KAC7C5C,EAASG,EAAWG,eAAe,CAACC,OAAQ,eAC5CP,EAASwC,EAAiBH,wBAE1BvC,EAAqB2D,EAAI1D,KAAMC,MAGtCuF,OAAM,SAAClF,GACJG,EAAyBH,EAAOL,WYtBrC,IAEH,OAAK+C,EAQD,yBAAK8F,UAAU,OACX,kBAACwC,GAAD,MACA,kBAACyC,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KACI,kBAACvG,GAAA,EAAD,CAAYwG,KAAK,QAAQtG,MAAM,UAAUuG,aAAW,QAChD,kBAACC,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CAAY5G,QAAQ,MAApB,SAGE9E,GAAc,kBAACsH,GAAA,EAAD,CAAQrC,MAAM,WAAd,SACfjF,GAAc,kBAACsH,GAAA,EAAD,CAAQrC,MAAM,UAAUD,QAASmG,GAAjC,WAEP,YAAXtN,GAAwB,kBAAC8N,GAAA,EAAD,OAE7B,kBAACC,GAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAO,IAAIC,QAAW,kBAAC,GAAD,QAC7B,kBAAC,KAAD,CAAOD,KAAO,YAAYC,QAAW,kBAAC,GAAD,QACrC,kBAAC,KAAD,CAAOD,KAAO,SAASC,QAAW,kBAAC,GAAD,QAClC,kBAAC,KAAD,CAAOD,KAAO,OAAOC,QAAW,qDAChC,kBAAC,KAAD,CAAOD,KAAO,IAAIC,QAAW,kBAAC,KAAD,CAAUzD,GAAG,cA5B/C,yBACHlB,MAAO,CAACiE,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAU5C,MAAO,SACnE,kBAAC6C,GAAA,EAAD,Q,SC9BZC,IAASC,OACL,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAUhJ,MAAOA,GACb,kBAAC,GAAD,QAGLiJ,SAASC,eAAe,SjB4HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7J,MAAK,SAAA8J,GACJA,EAAaC,gBAEd9J,OAAM,SAAAlF,GACLmF,QAAQnF,MAAMA,EAAMO,c","file":"static/js/main.94f4869d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype GetAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AddTaskArgType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n// instance\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1c29d8b-1c83-4c49-8a4c-55a3c1e75564'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`,\r\n            {title: title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(arg: AddTaskArgType) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${arg.todolistId}/tasks`, {title: arg.title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>(\r\n            'auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthMeType>>('auth/me')\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport {ResponseType} from '../api/todolist-api'\r\nimport {appActions} from \"../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (e: unknown, dispatch: Dispatch) => {\r\n    const err = e as Error | AxiosError<{ error: string }>\r\n    if (axios.isAxiosError(err)) {\r\n        const error = err.message ? err.message : 'Some error occurred'\r\n        dispatch(appActions.setAppErrorAC({error}))\r\n    } else {\r\n        dispatch(appActions.setAppErrorAC({error: `Native error ${err.message}`}))\r\n    }\r\n\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof appActions.setAppErrorAC > | ReturnType<typeof appActions.setAppStatusAC>>","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {tasksThunks} from \"./tasks-reducer\";\r\nimport {AppDispatch, AppThunk} from \"../../app/store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n        name: 'todolists',\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            },\r\n            addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n            },\r\n            changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].title = action.payload.title\r\n            },\r\n            changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            },\r\n            clearTodolistDataAC() {\r\n                return []\r\n            }\r\n        }\r\n    }\r\n)\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todolistsActions = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(todolistsActions.setTodolistsAC({todolists: res.data}))\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(tasksThunks.fetchTasks(tl.id))\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    dispatch(todolistsActions.changeTodolistEntityStatusAC({todolistId: todolistId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.removeTodolistAC({todolistId: todolistId}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string): AppThunk =>\r\n    (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(todolistsActions.changeTodolistTitleAC({todolistId: todolistId, title: title}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {todolistsActions} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\n//state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const authActions = slice.actions\r\n\r\n// thunks\r\n\r\nexport const loginTC = (payload: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authActions.setIsLoggedInAC({value: true}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authActions.setIsLoggedInAC({value: false}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(todolistsActions.clearTodolistDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AppDispatch, AppThunk} from \"./store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../features/Auth/auth-reducer\";\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n// state\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n        initialState: initialState,\r\n        reducers: {\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            },\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                state.isInitialized = action.payload.isInitialized\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const appActions = slice.actions\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => (dispatch: AppDispatch) => {\r\n    authAPI.me().then((res) => {\r\n        dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(authActions.setIsLoggedInAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppStateType} from \"../app/store\";\r\n\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: unknown\r\n}>()","import {AppDispatch, AppStateType, AppThunk} from \"../../app/store\";\r\nimport {appActions, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {\r\n    AddTaskArgType,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistAPI,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsActions} from \"./todolists-reducer\";\r\nimport {createAppAsyncThunk} from \"../../utils/create-app-async-thunk\";\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// state\r\nconst initialState: TasksStateType = {}\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>\r\n('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.getTask(todolistId)\r\n        const tasks = res.data.items\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>\r\n('tasks/addTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistAPI.createTask(arg)\r\n        const task = res.data.data.item\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            },\r\n            updateTaskAC(state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n            },\r\n            changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n                }\r\n            }\r\n        },\r\n        extraReducers: (builder) => {\r\n            builder.addCase(todolistsActions.addTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            builder.addCase(todolistsActions.removeTodolistAC, (state, action) => {\r\n                delete state[action.payload.todolistId]\r\n            })\r\n            builder.addCase(todolistsActions.setTodolistsAC, (state, action) => {\r\n                action.payload.todolists.forEach((tl) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            builder.addCase(todolistsActions.clearTodolistDataAC, () => {\r\n                return {}\r\n            })\r\n            builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            builder.addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task)\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\nexport const tasksActions = slice.actions\r\n\r\nexport const tasksThunks = {fetchTasks, addTask}\r\n\r\n// thunks\r\n// export const fetchTasksTC = (todolistId: string): AppThunk => (dispatch: AppDispatch) => {\r\n//     dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n//     todolistAPI.getTask(todolistId)\r\n//         .then((res) => {\r\n//             const tasks = res.data.items\r\n//             dispatch(tasksActions.setTasksAC({todolistId, tasks}))\r\n//             dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => (dispatch: AppDispatch) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    dispatch(tasksActions.changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'loading'}))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(tasksActions.removeTaskAC({taskId, todolistId}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n// export const addTaskTC = (todolistId: string, title: string): AppThunk => (dispatch: AppDispatch) => {\r\n//     dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n//     todolistAPI.createTask(todolistId, title)\r\n//         .then((res) => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(tasksActions.addTaskAC({task: res.data.data.item}))\r\n//                 dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType): AppThunk => (dispatch: AppDispatch, getState: () => AppStateType) => {\r\n    const allTasksFromState = getState().tasks\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n    if (!task) {\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        ...domainModel\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(tasksActions.updateTaskAC({taskId, domainModel, todolistId}))\r\n                dispatch(appActions.setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AnyAction, combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// export type AppRootStateType = ReturnType<typeof store.getState>\r\n// export type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionsType>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch=typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport type AppThunkDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [newTaskTitle, setNewTaskTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                label={'Title'}\r\n                variant={'outlined'}\r\n            />\r\n            <IconButton\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                disabled={disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled = false}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        if (disabled) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        changeTitle(newTitle)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={changeTitleHandler}\r\n                value={newTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback ((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === 'loading'}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler} disabled={props.task.entityStatus === 'loading'} />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'all'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, 'active'),\r\n        [props.todolist.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"),\r\n        [props.todolist.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, todolistsActions, updateTitleTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {removeTaskTC, TasksStateType, tasksThunks, updateTaskTC} from \"./tasks-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(tasksThunks.addTask({todolistId, title}));\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}));\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = todolistsActions.changeTodolistFilterAC({todolistId: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTitleTodolistTC(todolistId, title));\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {appActions} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appActions.setAppErrorAC({error: null}))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 4 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox onChange={formik.handleChange}\r\n                                                             checked={formik.values.rememberMe}\r\n                                                             name='rememberMe'\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport { logoutTC } from '../features/Auth/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {!isLoggedIn && <Button color=\"inherit\">Login</Button>}\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path = '/' element = {<TodolistsList />} />\r\n                    <Route path = '/todolist' element = {<TodolistsList />} />\r\n                    <Route path = '/login' element = {<Login />} />\r\n                    <Route path = '/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = '*' element = {<Navigate to='/404'/> } />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}